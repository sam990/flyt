/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CPU_RPC_PROT_H_RPCGEN
#define _CPU_RPC_PROT_H_RPCGEN

#include <rpc/rpc.h>

#include <pthread.h>

#ifdef __cplusplus
extern "C" {
#endif


typedef struct {
	u_int mem_data_len;
	char *mem_data_val;
} mem_data;

typedef u_quad_t size_t;

typedef u_quad_t ptr;

typedef quad_t ll;

typedef char rpc_cuda_device_prop[1032];

typedef char rpc_matmul_heuristic_result[96];

struct dint {
	int i1;
	int i2;
};
typedef struct dint dint;

struct dsz {
	size_t sz1;
	size_t sz2;
};
typedef struct dsz dsz;

struct ptrsz {
	ptr p;
	size_t s;
};
typedef struct ptrsz ptrsz;

struct matmul_hr {
	rpc_matmul_heuristic_result p;
	int s;
};
typedef struct matmul_hr matmul_hr;

struct cuda_channel_format_desc {
	int f;
	int w;
	int x;
	int y;
	int z;
};
typedef struct cuda_channel_format_desc cuda_channel_format_desc;

struct pitche_ptr {
	size_t pitch;
	ptr ptr;
	size_t xsize;
	size_t ysize;
};
typedef struct pitche_ptr pitche_ptr;

struct rpc_dim3 {
	u_int x;
	u_int y;
	u_int z;
};
typedef struct rpc_dim3 rpc_dim3;

struct int2d1 {
	int i[2];
	double d;
};
typedef struct int2d1 int2d1;

struct int1d3 {
	int i;
	double d[3];
};
typedef struct int1d3 int1d3;

struct cudnn_scaling_t {
	int dataType;
	union {
		float f;
		double d;
	} cudnn_scaling_t_u;
};
typedef struct cudnn_scaling_t cudnn_scaling_t;

struct int_result {
	int err;
	union {
		int data;
	} int_result_u;
};
typedef struct int_result int_result;

struct dint_result {
	int err;
	union {
		dint data;
	} dint_result_u;
};
typedef struct dint_result dint_result;

struct float_result {
	int err;
	union {
		float data;
	} float_result_u;
};
typedef struct float_result float_result;

struct d_result {
	int err;
	union {
		double data;
	} d_result_u;
};
typedef struct d_result d_result;

struct u64_result {
	int err;
	union {
		u_quad_t u64;
	} u64_result_u;
};
typedef struct u64_result u64_result;

struct dsz_result {
	int err;
	union {
		dsz data;
	} dsz_result_u;
};
typedef struct dsz_result dsz_result;

struct sz_result {
	int err;
	union {
		size_t data;
	} sz_result_u;
};
typedef struct sz_result sz_result;

struct ptr_result {
	int err;
	union {
		ptr ptr;
	} ptr_result_u;
};
typedef struct ptr_result ptr_result;

struct pptr_result {
	int err;
	union {
		pitche_ptr ptr;
	} pptr_result_u;
};
typedef struct pptr_result pptr_result;

struct str_result {
	int err;
	union {
		char *str;
	} str_result_u;
};
typedef struct str_result str_result;

struct ptrsz_result {
	int err;
	union {
		ptrsz data;
	} ptrsz_result_u;
};
typedef struct ptrsz_result ptrsz_result;

struct matmul_hr_result {
	int err;
	union {
		matmul_hr data;
	} matmul_hr_result_u;
};
typedef struct matmul_hr_result matmul_hr_result;

struct mem_result {
	int err;
	union {
		mem_data data;
	} mem_result_u;
};
typedef struct mem_result mem_result;

struct cuda_device_prop_result {
	int err;
	union {
		rpc_cuda_device_prop data;
	} cuda_device_prop_result_u;
};
typedef struct cuda_device_prop_result cuda_device_prop_result;

struct int3_result {
	int err;
	union {
		int data[3];
	} int3_result_u;
};
typedef struct int3_result int3_result;

struct int4_result {
	int err;
	union {
		int data[4];
	} int4_result_u;
};
typedef struct int4_result int4_result;

struct int5_result {
	int err;
	union {
		int data[5];
	} int5_result_u;
};
typedef struct int5_result int5_result;

struct int6_result {
	int err;
	union {
		int data[6];
	} int6_result_u;
};
typedef struct int6_result int6_result;

struct int8_result {
	int err;
	union {
		int data[8];
	} int8_result_u;
};
typedef struct int8_result int8_result;

struct int9_result {
	int err;
	union {
		int data[9];
	} int9_result_u;
};
typedef struct int9_result int9_result;

struct int2d1_result {
	int err;
	union {
		int2d1 data;
	} int2d1_result_u;
};
typedef struct int2d1_result int2d1_result;

struct int1d3_result {
	int err;
	union {
		int1d3 data;
	} int1d3_result_u;
};
typedef struct int1d3_result int1d3_result;

struct rpc_register_function_1_argument {
	ptr arg1;
	ptr arg2;
	char *arg3;
	char *arg4;
	int arg5;
};
typedef struct rpc_register_function_1_argument rpc_register_function_1_argument;

struct rpc_elf_load_1_argument {
	mem_data arg1;
	ptr arg2;
};
typedef struct rpc_elf_load_1_argument rpc_elf_load_1_argument;

struct rpc_register_var_1_argument {
	ptr arg1;
	ptr arg2;
	ptr arg3;
	char *arg4;
	int arg5;
	size_t arg6;
	int arg7;
	int arg8;
};
typedef struct rpc_register_var_1_argument rpc_register_var_1_argument;

struct cuda_device_get_attribute_1_argument {
	int arg1;
	int arg2;
};
typedef struct cuda_device_get_attribute_1_argument cuda_device_get_attribute_1_argument;

struct cuda_device_get_p2p_attribute_1_argument {
	int arg1;
	int arg2;
	int arg3;
};
typedef struct cuda_device_get_p2p_attribute_1_argument cuda_device_get_p2p_attribute_1_argument;

struct cuda_device_get_pci_bus_id_1_argument {
	int arg1;
	int arg2;
};
typedef struct cuda_device_get_pci_bus_id_1_argument cuda_device_get_pci_bus_id_1_argument;

struct cuda_device_get_texture_lmw_1_argument {
	cuda_channel_format_desc arg1;
	int arg2;
};
typedef struct cuda_device_get_texture_lmw_1_argument cuda_device_get_texture_lmw_1_argument;

struct cuda_device_set_limit_1_argument {
	int arg1;
	size_t arg2;
};
typedef struct cuda_device_set_limit_1_argument cuda_device_set_limit_1_argument;

struct cuda_set_valid_devices_1_argument {
	mem_data arg1;
	int arg2;
};
typedef struct cuda_set_valid_devices_1_argument cuda_set_valid_devices_1_argument;

struct cuda_stream_copy_attributes_1_argument {
	ptr arg1;
	ptr arg2;
};
typedef struct cuda_stream_copy_attributes_1_argument cuda_stream_copy_attributes_1_argument;

struct cuda_stream_create_with_priority_1_argument {
	int arg1;
	int arg2;
};
typedef struct cuda_stream_create_with_priority_1_argument cuda_stream_create_with_priority_1_argument;

struct cuda_stream_wait_event_1_argument {
	ptr arg1;
	ptr arg2;
	int arg3;
};
typedef struct cuda_stream_wait_event_1_argument cuda_stream_wait_event_1_argument;

struct cuda_event_elapsed_time_1_argument {
	ptr arg1;
	ptr arg2;
};
typedef struct cuda_event_elapsed_time_1_argument cuda_event_elapsed_time_1_argument;

struct cuda_event_record_1_argument {
	ptr arg1;
	ptr arg2;
};
typedef struct cuda_event_record_1_argument cuda_event_record_1_argument;

struct cuda_event_record_with_flags_1_argument {
	ptr arg1;
	ptr arg2;
	int arg3;
};
typedef struct cuda_event_record_with_flags_1_argument cuda_event_record_with_flags_1_argument;

struct cuda_func_set_attributes_1_argument {
	ptr arg1;
	int arg2;
	int arg3;
};
typedef struct cuda_func_set_attributes_1_argument cuda_func_set_attributes_1_argument;

struct cuda_func_set_cache_config_1_argument {
	ptr arg1;
	int arg2;
};
typedef struct cuda_func_set_cache_config_1_argument cuda_func_set_cache_config_1_argument;

struct cuda_func_set_shared_mem_config_1_argument {
	ptr arg1;
	int arg2;
};
typedef struct cuda_func_set_shared_mem_config_1_argument cuda_func_set_shared_mem_config_1_argument;

struct cuda_launch_cooperative_kernel_1_argument {
	ptr arg1;
	rpc_dim3 arg2;
	rpc_dim3 arg3;
	mem_data arg4;
	size_t arg5;
	ptr arg6;
};
typedef struct cuda_launch_cooperative_kernel_1_argument cuda_launch_cooperative_kernel_1_argument;

struct cuda_launch_kernel_1_argument {
	ptr arg1;
	rpc_dim3 arg2;
	rpc_dim3 arg3;
	mem_data arg4;
	size_t arg5;
	ptr arg6;
};
typedef struct cuda_launch_kernel_1_argument cuda_launch_kernel_1_argument;

struct cuda_occupancy_available_dsmpb_1_argument {
	ptr arg1;
	int arg2;
	int arg3;
};
typedef struct cuda_occupancy_available_dsmpb_1_argument cuda_occupancy_available_dsmpb_1_argument;

struct cuda_occupancy_max_active_bpm_1_argument {
	ptr arg1;
	int arg2;
	size_t arg3;
};
typedef struct cuda_occupancy_max_active_bpm_1_argument cuda_occupancy_max_active_bpm_1_argument;

struct cuda_occupancy_max_active_bpm_with_flags_1_argument {
	ptr arg1;
	int arg2;
	size_t arg3;
	int arg4;
};
typedef struct cuda_occupancy_max_active_bpm_with_flags_1_argument cuda_occupancy_max_active_bpm_with_flags_1_argument;

struct cuda_host_alloc_1_argument {
	size_t arg1;
	u_int arg2;
};
typedef struct cuda_host_alloc_1_argument cuda_host_alloc_1_argument;

struct cuda_host_alloc_regshm_1_argument {
	size_t arg1;
	ptr arg2;
};
typedef struct cuda_host_alloc_regshm_1_argument cuda_host_alloc_regshm_1_argument;

struct cuda_host_get_device_pointer_1_argument {
	ptr arg1;
	int arg2;
};
typedef struct cuda_host_get_device_pointer_1_argument cuda_host_get_device_pointer_1_argument;

struct cuda_malloc_3d_1_argument {
	size_t arg1;
	size_t arg2;
	size_t arg3;
};
typedef struct cuda_malloc_3d_1_argument cuda_malloc_3d_1_argument;

struct cuda_malloc_3d_array_1_argument {
	cuda_channel_format_desc arg1;
	size_t arg2;
	size_t arg3;
	size_t arg4;
	int arg5;
};
typedef struct cuda_malloc_3d_array_1_argument cuda_malloc_3d_array_1_argument;

struct cuda_malloc_array_1_argument {
	cuda_channel_format_desc arg1;
	size_t arg2;
	size_t arg3;
	int arg4;
};
typedef struct cuda_malloc_array_1_argument cuda_malloc_array_1_argument;

struct cuda_malloc_pitch_1_argument {
	size_t arg1;
	size_t arg2;
};
typedef struct cuda_malloc_pitch_1_argument cuda_malloc_pitch_1_argument;

struct cuda_mem_advise_1_argument {
	ptr arg1;
	size_t arg2;
	int arg3;
	int arg4;
};
typedef struct cuda_mem_advise_1_argument cuda_mem_advise_1_argument;

struct cuda_mem_prefetch_async_1_argument {
	ptr arg1;
	size_t arg2;
	int arg3;
	ptr arg4;
};
typedef struct cuda_mem_prefetch_async_1_argument cuda_mem_prefetch_async_1_argument;

struct cuda_memcpy_htod_1_argument {
	ptr arg1;
	mem_data arg2;
	size_t arg3;
};
typedef struct cuda_memcpy_htod_1_argument cuda_memcpy_htod_1_argument;

struct cuda_memcpy_dtoh_1_argument {
	ptr arg1;
	size_t arg2;
};
typedef struct cuda_memcpy_dtoh_1_argument cuda_memcpy_dtoh_1_argument;

struct cuda_memcpy_shm_1_argument {
	int arg1;
	ptr arg2;
	size_t arg3;
	int arg4;
};
typedef struct cuda_memcpy_shm_1_argument cuda_memcpy_shm_1_argument;

struct cuda_memcpy_dtod_1_argument {
	ptr arg1;
	ptr arg2;
	size_t arg3;
};
typedef struct cuda_memcpy_dtod_1_argument cuda_memcpy_dtod_1_argument;

struct cuda_memcpy_to_symbol_1_argument {
	ptr arg1;
	mem_data arg2;
	size_t arg3;
	size_t arg4;
};
typedef struct cuda_memcpy_to_symbol_1_argument cuda_memcpy_to_symbol_1_argument;

struct cuda_memcpy_to_symbol_shm_1_argument {
	int arg1;
	ptr arg2;
	size_t arg3;
	size_t arg4;
	int arg5;
};
typedef struct cuda_memcpy_to_symbol_shm_1_argument cuda_memcpy_to_symbol_shm_1_argument;

struct cuda_memcpy_ib_1_argument {
	int arg1;
	ptr arg2;
	size_t arg3;
	int arg4;
};
typedef struct cuda_memcpy_ib_1_argument cuda_memcpy_ib_1_argument;

struct cuda_memcpy_mt_htod_1_argument {
	ptr arg1;
	size_t arg2;
	int arg3;
};
typedef struct cuda_memcpy_mt_htod_1_argument cuda_memcpy_mt_htod_1_argument;

struct cuda_memcpy_mt_dtoh_1_argument {
	ptr arg1;
	size_t arg2;
	int arg3;
};
typedef struct cuda_memcpy_mt_dtoh_1_argument cuda_memcpy_mt_dtoh_1_argument;

struct cuda_memset_1_argument {
	ptr arg1;
	int arg2;
	size_t arg3;
};
typedef struct cuda_memset_1_argument cuda_memset_1_argument;

struct cuda_memset_2d_1_argument {
	ptr arg1;
	size_t arg2;
	int arg3;
	size_t arg4;
	size_t arg5;
};
typedef struct cuda_memset_2d_1_argument cuda_memset_2d_1_argument;

struct cuda_memset_2d_async_1_argument {
	ptr arg1;
	size_t arg2;
	int arg3;
	size_t arg4;
	size_t arg5;
	ptr arg6;
};
typedef struct cuda_memset_2d_async_1_argument cuda_memset_2d_async_1_argument;

struct cuda_memset_3d_1_argument {
	size_t arg1;
	ptr arg2;
	size_t arg3;
	size_t arg4;
	int arg5;
	size_t arg6;
	size_t arg7;
	size_t arg8;
};
typedef struct cuda_memset_3d_1_argument cuda_memset_3d_1_argument;

struct cuda_memset_3d_async_1_argument {
	size_t arg1;
	ptr arg2;
	size_t arg3;
	size_t arg4;
	int arg5;
	size_t arg6;
	size_t arg7;
	size_t arg8;
	ptr arg9;
};
typedef struct cuda_memset_3d_async_1_argument cuda_memset_3d_async_1_argument;

struct cuda_memset_async_1_argument {
	ptr arg1;
	int arg2;
	size_t arg3;
	ptr arg4;
};
typedef struct cuda_memset_async_1_argument cuda_memset_async_1_argument;

struct cuda_device_can_access_peer_1_argument {
	int arg1;
	int arg2;
};
typedef struct cuda_device_can_access_peer_1_argument cuda_device_can_access_peer_1_argument;

struct cuda_device_enable_peer_access_1_argument {
	int arg1;
	int arg2;
};
typedef struct cuda_device_enable_peer_access_1_argument cuda_device_enable_peer_access_1_argument;

struct rpc_cudevicegetattribute_1_argument {
	int arg1;
	int arg2;
};
typedef struct rpc_cudevicegetattribute_1_argument rpc_cudevicegetattribute_1_argument;

struct rpc_cumodulegetfunction_1_argument {
	ptr arg1;
	char *arg2;
};
typedef struct rpc_cumodulegetfunction_1_argument rpc_cumodulegetfunction_1_argument;

struct rpc_cumemcpyhtod_1_argument {
	ptr arg1;
	mem_data arg2;
};
typedef struct rpc_cumemcpyhtod_1_argument rpc_cumemcpyhtod_1_argument;

struct rpc_culaunchkernel_1_argument {
	ptr arg1;
	u_int arg2;
	u_int arg3;
	u_int arg4;
	u_int arg5;
	u_int arg6;
	u_int arg7;
	u_int arg8;
	ptr arg9;
	mem_data arg10;
};
typedef struct rpc_culaunchkernel_1_argument rpc_culaunchkernel_1_argument;

struct rpc_cudevicegetp2pattribute_1_argument {
	int arg1;
	ptr arg2;
	ptr arg3;
};
typedef struct rpc_cudevicegetp2pattribute_1_argument rpc_cudevicegetp2pattribute_1_argument;

struct rpc_cusolverdnsetstream_1_argument {
	ptr arg1;
	ptr arg2;
};
typedef struct rpc_cusolverdnsetstream_1_argument rpc_cusolverdnsetstream_1_argument;

struct rpc_cusolverdndgetrf_buffersize_1_argument {
	ptr arg1;
	int arg2;
	int arg3;
	ptr arg4;
	int arg5;
};
typedef struct rpc_cusolverdndgetrf_buffersize_1_argument rpc_cusolverdndgetrf_buffersize_1_argument;

struct rpc_cusolverdndgetrf_1_argument {
	ptr arg1;
	int arg2;
	int arg3;
	ptr arg4;
	int arg5;
	ptr arg6;
	ptr arg7;
	ptr arg8;
};
typedef struct rpc_cusolverdndgetrf_1_argument rpc_cusolverdndgetrf_1_argument;

struct rpc_cusolverdndgetrs_1_argument {
	ptr arg1;
	int arg2;
	int arg3;
	int arg4;
	ptr arg5;
	int arg6;
	ptr arg7;
	ptr arg8;
	int arg9;
	ptr arg10;
};
typedef struct rpc_cusolverdndgetrs_1_argument rpc_cusolverdndgetrs_1_argument;

struct rpc_cublasdgemm_1_argument {
	ptr arg1;
	int arg2;
	int arg3;
	int arg4;
	int arg5;
	int arg6;
	double arg7;
	ptr arg8;
	int arg9;
	ptr arg10;
	int arg11;
	double arg12;
	ptr arg13;
	int arg14;
};
typedef struct rpc_cublasdgemm_1_argument rpc_cublasdgemm_1_argument;

struct rpc_cublassgemm_1_argument {
	ptr arg1;
	int arg2;
	int arg3;
	int arg4;
	int arg5;
	int arg6;
	float arg7;
	ptr arg8;
	int arg9;
	ptr arg10;
	int arg11;
	float arg12;
	ptr arg13;
	int arg14;
};
typedef struct rpc_cublassgemm_1_argument rpc_cublassgemm_1_argument;

struct rpc_cublassgemv_1_argument {
	ptr arg1;
	int arg2;
	int arg3;
	int arg4;
	float arg5;
	ptr arg6;
	int arg7;
	ptr arg8;
	int arg9;
	float arg10;
	ptr arg11;
	int arg12;
};
typedef struct rpc_cublassgemv_1_argument rpc_cublassgemv_1_argument;

struct rpc_cublasdgemv_1_argument {
	ptr arg1;
	int arg2;
	int arg3;
	int arg4;
	double arg5;
	ptr arg6;
	int arg7;
	ptr arg8;
	int arg9;
	double arg10;
	ptr arg11;
	int arg12;
};
typedef struct rpc_cublasdgemv_1_argument rpc_cublasdgemv_1_argument;

struct rpc_cublassgemmex_1_argument {
	ptr arg1;
	int arg2;
	int arg3;
	int arg4;
	int arg5;
	int arg6;
	float arg7;
	ptr arg8;
	int arg9;
	int arg10;
	ptr arg11;
	int arg12;
	int arg13;
	float arg14;
	ptr arg15;
	int arg16;
	int arg17;
};
typedef struct rpc_cublassgemmex_1_argument rpc_cublassgemmex_1_argument;

struct rpc_cublassetstream_1_argument {
	ptr handle;
	ptr streamId;
};
typedef struct rpc_cublassetstream_1_argument rpc_cublassetstream_1_argument;

struct rpc_cublassetworkspace_1_argument {
	ptr handle;
	ptr workspace;
	size_t workspaceSizeInBytes;
};
typedef struct rpc_cublassetworkspace_1_argument rpc_cublassetworkspace_1_argument;

struct rpc_cublassetmathmode_1_argument {
	ptr handle;
	int mode;
};
typedef struct rpc_cublassetmathmode_1_argument rpc_cublassetmathmode_1_argument;

struct rpc_cudnnqueryruntimeerror_1_argument {
	ptr handle;
	int mode;
};
typedef struct rpc_cudnnqueryruntimeerror_1_argument rpc_cudnnqueryruntimeerror_1_argument;

struct rpc_cudnnsetstream_1_argument {
	ptr handle;
	ptr streamId;
};
typedef struct rpc_cudnnsetstream_1_argument rpc_cudnnsetstream_1_argument;

struct rpc_cudnnsettensor4ddescriptor_1_argument {
	ptr tensorDesc;
	int format;
	int dataType;
	int n;
	int c;
	int h;
	int w;
};
typedef struct rpc_cudnnsettensor4ddescriptor_1_argument rpc_cudnnsettensor4ddescriptor_1_argument;

struct rpc_cudnnsettensor4ddescriptorex_1_argument {
	ptr tensorDesc;
	int dataType;
	int n;
	int c;
	int h;
	int w;
	int nStride;
	int cStride;
	int hStride;
	int wStride;
};
typedef struct rpc_cudnnsettensor4ddescriptorex_1_argument rpc_cudnnsettensor4ddescriptorex_1_argument;

struct rpc_cudnnsettensornddescriptor_1_argument {
	ptr tensorDesc;
	int dataType;
	int nbDims;
	mem_data dimA;
	mem_data strideA;
};
typedef struct rpc_cudnnsettensornddescriptor_1_argument rpc_cudnnsettensornddescriptor_1_argument;

struct rpc_cudnnsettensornddescriptorex_1_argument {
	ptr tensorDesc;
	int format;
	int dataType;
	int nbDims;
	mem_data dimA;
};
typedef struct rpc_cudnnsettensornddescriptorex_1_argument rpc_cudnnsettensornddescriptorex_1_argument;

struct rpc_cudnngettensornddescriptor_1_argument {
	ptr tensorDesc;
	int nbDimsRequested;
};
typedef struct rpc_cudnngettensornddescriptor_1_argument rpc_cudnngettensornddescriptor_1_argument;

struct rpc_cudnntransformtensor_1_argument {
	ptr handle;
	cudnn_scaling_t alpha;
	ptr xDesc;
	ptr x;
	cudnn_scaling_t beta;
	ptr yDesc;
	ptr y;
};
typedef struct rpc_cudnntransformtensor_1_argument rpc_cudnntransformtensor_1_argument;

struct rpc_cudnnaddtensor_1_argument {
	ptr handle;
	cudnn_scaling_t alpha;
	ptr aDesc;
	ptr A;
	cudnn_scaling_t beta;
	ptr cDesc;
	ptr C;
};
typedef struct rpc_cudnnaddtensor_1_argument rpc_cudnnaddtensor_1_argument;

struct rpc_cudnnsetfilter4ddescriptor_1_argument {
	ptr filterDesc;
	int dataType;
	int format;
	int k;
	int c;
	int h;
	int w;
};
typedef struct rpc_cudnnsetfilter4ddescriptor_1_argument rpc_cudnnsetfilter4ddescriptor_1_argument;

struct rpc_cudnnsetfilternddescriptor_1_argument {
	ptr filterDesc;
	int dataType;
	int format;
	int nbDims;
	mem_data filterDimA;
};
typedef struct rpc_cudnnsetfilternddescriptor_1_argument rpc_cudnnsetfilternddescriptor_1_argument;

struct rpc_cudnngetfilternddescriptor_1_argument {
	ptr filterDesc;
	int nbDimsRequested;
};
typedef struct rpc_cudnngetfilternddescriptor_1_argument rpc_cudnngetfilternddescriptor_1_argument;

struct rpc_cudnntransformfilter_1_argument {
	ptr handle;
	ptr transDesc;
	cudnn_scaling_t alpha;
	ptr srcDesc;
	ptr srcData;
	cudnn_scaling_t beta;
	ptr destDesc;
	ptr destData;
};
typedef struct rpc_cudnntransformfilter_1_argument rpc_cudnntransformfilter_1_argument;

struct rpc_cudnnsoftmaxforward_1_argument {
	ptr handle;
	int algo;
	int mode;
	cudnn_scaling_t alpha;
	ptr xDesc;
	ptr x;
	cudnn_scaling_t beta;
	ptr yDesc;
	ptr y;
};
typedef struct rpc_cudnnsoftmaxforward_1_argument rpc_cudnnsoftmaxforward_1_argument;

struct rpc_cudnnsetpooling2ddescriptor_1_argument {
	ptr poolingDesc;
	int mode;
	int maxpoolingNanOpt;
	int windowHeight;
	int windowWidth;
	int verticalPadding;
	int horizontalPadding;
	int verticalStride;
	int horizontalStride;
};
typedef struct rpc_cudnnsetpooling2ddescriptor_1_argument rpc_cudnnsetpooling2ddescriptor_1_argument;

struct rpc_cudnnsetpoolingnddescriptor_1_argument {
	ptr poolingDesc;
	int mode;
	int maxpoolingNanOpt;
	int nbDims;
	mem_data windowDimA;
	mem_data paddingA;
	mem_data strideA;
};
typedef struct rpc_cudnnsetpoolingnddescriptor_1_argument rpc_cudnnsetpoolingnddescriptor_1_argument;

struct rpc_cudnngetpoolingnddescriptor_1_argument {
	ptr poolingDesc;
	int nbDimsRequested;
};
typedef struct rpc_cudnngetpoolingnddescriptor_1_argument rpc_cudnngetpoolingnddescriptor_1_argument;

struct rpc_cudnngetpoolingndforwardoutputdim_1_argument {
	ptr poolingDesc;
	ptr inputTensorDesc;
	int nbDims;
};
typedef struct rpc_cudnngetpoolingndforwardoutputdim_1_argument rpc_cudnngetpoolingndforwardoutputdim_1_argument;

struct rpc_cudnngetpooling2dforwardoutputdim_1_argument {
	ptr poolingDesc;
	ptr inputTensorDesc;
};
typedef struct rpc_cudnngetpooling2dforwardoutputdim_1_argument rpc_cudnngetpooling2dforwardoutputdim_1_argument;

struct rpc_cudnnpoolingforward_1_argument {
	ptr handle;
	ptr poolingDesc;
	cudnn_scaling_t alpha;
	ptr xDesc;
	ptr x;
	cudnn_scaling_t beta;
	ptr yDesc;
	ptr y;
};
typedef struct rpc_cudnnpoolingforward_1_argument rpc_cudnnpoolingforward_1_argument;

struct rpc_cudnnsetactivationdescriptor_1_argument {
	ptr activationDesc;
	int mode;
	int reluNanOpt;
	double coef;
};
typedef struct rpc_cudnnsetactivationdescriptor_1_argument rpc_cudnnsetactivationdescriptor_1_argument;

struct rpc_cudnnsetactivationdescriptorswishbeta_1_argument {
	ptr activationDesc;
	double swish_beta;
};
typedef struct rpc_cudnnsetactivationdescriptorswishbeta_1_argument rpc_cudnnsetactivationdescriptorswishbeta_1_argument;

struct rpc_cudnnactivationforward_1_argument {
	ptr handle;
	ptr activationDesc;
	cudnn_scaling_t alpha;
	ptr xDesc;
	ptr x;
	cudnn_scaling_t beta;
	ptr yDesc;
	ptr y;
};
typedef struct rpc_cudnnactivationforward_1_argument rpc_cudnnactivationforward_1_argument;

struct rpc_cudnnsetlrndescriptor_1_argument {
	ptr normDesc;
	u_int lrnN;
	double lrnAlpha;
	double lrnBeta;
	double lrnK;
};
typedef struct rpc_cudnnsetlrndescriptor_1_argument rpc_cudnnsetlrndescriptor_1_argument;

struct rpc_cudnnlrncrosschannelforward_1_argument {
	ptr handle;
	ptr normDesc;
	int lrnMode;
	cudnn_scaling_t alpha;
	ptr xDesc;
	ptr x;
	cudnn_scaling_t beta;
	ptr yDesc;
	ptr y;
};
typedef struct rpc_cudnnlrncrosschannelforward_1_argument rpc_cudnnlrncrosschannelforward_1_argument;

struct rpc_cudnngetconvolutionndforwardoutputdim_1_argument {
	ptr convDesc;
	ptr inputTensorDesc;
	ptr filterDesc;
	int nbDims;
};
typedef struct rpc_cudnngetconvolutionndforwardoutputdim_1_argument rpc_cudnngetconvolutionndforwardoutputdim_1_argument;

struct rpc_cudnnsetconvolutionnddescriptor_1_argument {
	ptr convDesc;
	int arrayLength;
	mem_data padA;
	mem_data filterStrideA;
	mem_data dilationA;
	int mode;
	int computeType;
};
typedef struct rpc_cudnnsetconvolutionnddescriptor_1_argument rpc_cudnnsetconvolutionnddescriptor_1_argument;

struct rpc_cudnngetconvolutionforwardalgorithm_v7_1_argument {
	ptr handle;
	ptr srcDesc;
	ptr filterDesc;
	ptr convDesc;
	ptr destDesc;
	int requestedAlgoCount;
};
typedef struct rpc_cudnngetconvolutionforwardalgorithm_v7_1_argument rpc_cudnngetconvolutionforwardalgorithm_v7_1_argument;

struct rpc_cudnnfindconvolutionforwardalgorithm_1_argument {
	ptr handle;
	ptr xDesc;
	ptr wDesc;
	ptr convDesc;
	ptr yDesc;
	int requestedAlgoCount;
};
typedef struct rpc_cudnnfindconvolutionforwardalgorithm_1_argument rpc_cudnnfindconvolutionforwardalgorithm_1_argument;

struct rpc_cudnngetconvolutionforwardworkspacesize_1_argument {
	ptr handle;
	ptr xDesc;
	ptr wDesc;
	ptr convDesc;
	ptr yDesc;
	int algo;
};
typedef struct rpc_cudnngetconvolutionforwardworkspacesize_1_argument rpc_cudnngetconvolutionforwardworkspacesize_1_argument;

struct rpc_cudnnconvolutionforward_1_argument {
	ptr handle;
	cudnn_scaling_t alpha;
	ptr xDesc;
	ptr x;
	ptr wDesc;
	ptr w;
	ptr convDesc;
	int algo;
	ptr workSpace;
	size_t workSpaceSizeInBytes;
	cudnn_scaling_t beta;
	ptr yDesc;
	ptr y;
};
typedef struct rpc_cudnnconvolutionforward_1_argument rpc_cudnnconvolutionforward_1_argument;

struct rpc_cudnnbackendsetattribute_1_argument {
	ptr descriptor;
	int attributeName;
	int attributeType;
	quad_t elementCount;
	mem_data arrayOfElements;
};
typedef struct rpc_cudnnbackendsetattribute_1_argument rpc_cudnnbackendsetattribute_1_argument;

struct rpc_cudnnbackendgetattribute_1_argument {
	ptr descriptor;
	int attributeName;
	int attributeType;
	quad_t requestedElementCount;
};
typedef struct rpc_cudnnbackendgetattribute_1_argument rpc_cudnnbackendgetattribute_1_argument;

struct rpc_cudnnbackendexecute_1_argument {
	ptr handle;
	ptr executionPlan;
	ptr variantPack;
};
typedef struct rpc_cudnnbackendexecute_1_argument rpc_cudnnbackendexecute_1_argument;

struct rpc_cudnnsetconvolutiongroupcount_1_argument {
	ptr convDesc;
	int groupCount;
};
typedef struct rpc_cudnnsetconvolutiongroupcount_1_argument rpc_cudnnsetconvolutiongroupcount_1_argument;

struct rpc_cudnnsetconvolutionmathtype_1_argument {
	ptr convDesc;
	int mathType;
};
typedef struct rpc_cudnnsetconvolutionmathtype_1_argument rpc_cudnnsetconvolutionmathtype_1_argument;

struct rpc_cublasltmatmuldesccreate_1_argument {
	int computeType;
	int scaleType;
};
typedef struct rpc_cublasltmatmuldesccreate_1_argument rpc_cublasltmatmuldesccreate_1_argument;

struct rpc_cublasltmatmulalgogetheuristic_1_argument {
	ptr handle;
	ptr operationDesc;
	ptr aDesc;
	ptr bDesc;
	ptr cDesc;
	ptr dDesc;
	ptr preference;
	int requestedAlgoCount;
};
typedef struct rpc_cublasltmatmulalgogetheuristic_1_argument rpc_cublasltmatmulalgogetheuristic_1_argument;

struct rpc_cublasltmatmuldescsetattribute_1_argument {
	ptr matmulDesc;
	int attr;
	mem_data data;
};
typedef struct rpc_cublasltmatmuldescsetattribute_1_argument rpc_cublasltmatmuldescsetattribute_1_argument;

struct rpc_cublasltmatrixlayoutcreate_1_argument {
	int type;
	uint64_t row;
	uint64_t cols;
	int64_t ld;
};
typedef struct rpc_cublasltmatrixlayoutcreate_1_argument rpc_cublasltmatrixlayoutcreate_1_argument;

struct rpc_cublasltmatmul_1_argument {
	ptr lightHandle;
	ptr computeDesc;
	float alpha;
	ptr A;
	ptr Adesc;
	ptr B;
	ptr Bdesc;
	float beta;
	ptr C;
	ptr Cdesc;
	ptr D;
	ptr Ddesc;
	ptr algo;
	ptr workspace;
	size_t workspaceSizeInBytes;
	ptr stream;
};
typedef struct rpc_cublasltmatmul_1_argument rpc_cublasltmatmul_1_argument;

struct rpc_cublasgemmstridedbatchedex_1_argument {
	ptr handle;
	int transa;
	int transb;
	int m;
	int n;
	int k;
	float alpha;
	ptr A;
	int Atype;
	int lda;
	ll strideA;
	ptr B;
	int Btype;
	int ldb;
	ll strideB;
	float beta;
	ptr C;
	int Ctype;
	int ldc;
	ll strideC;
	int batchCount;
	int computeType;
	int algo;
};
typedef struct rpc_cublasgemmstridedbatchedex_1_argument rpc_cublasgemmstridedbatchedex_1_argument;

struct rpc_cublasgemmex_1_argument {
	ptr arg1;
	int arg2;
	int arg3;
	int arg4;
	int arg5;
	int arg6;
	float arg7;
	ptr arg8;
	int arg9;
	int arg10;
	ptr arg11;
	int arg12;
	int arg13;
	float arg14;
	ptr arg15;
	int arg16;
	int arg17;
	int arg18;
	int arg19;
};
typedef struct rpc_cublasgemmex_1_argument rpc_cublasgemmex_1_argument;

struct rpc_cublasgemmstridedbatched_1_argument {
	ptr handle;
	int transa;
	int transb;
	int m;
	int n;
	int k;
	float alpha;
	ptr A;
	int lda;
	ll strideA;
	ptr B;
	int ldb;
	ll strideB;
	float beta;
	ptr C;
	int ldc;
	ll strideC;
	int batchCount;
};
typedef struct rpc_cublasgemmstridedbatched_1_argument rpc_cublasgemmstridedbatched_1_argument;

#define RPC_CD_PROG 99
#define RPC_CD_VERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define rpc_checkpoint 0
extern  enum clnt_stat rpc_checkpoint_1(int *, CLIENT *);
extern  bool_t rpc_checkpoint_1_svc(int *, struct svc_req *);
#define rpc_deinit 1
extern  enum clnt_stat rpc_deinit_1(int *, CLIENT *);
extern  bool_t rpc_deinit_1_svc(int *, struct svc_req *);
#define rpc_printmessage 2
extern  enum clnt_stat rpc_printmessage_1(char *, int *, CLIENT *);
extern  bool_t rpc_printmessage_1_svc(char *, int *, struct svc_req *);
#define rpc_dlopen 3
extern  enum clnt_stat rpc_dlopen_1(char *, int *, CLIENT *);
extern  bool_t rpc_dlopen_1_svc(char *, int *, struct svc_req *);
#define rpc_register_function 50
extern  enum clnt_stat rpc_register_function_1(ptr , ptr , char *, char *, int , ptr_result *, CLIENT *);
extern  bool_t rpc_register_function_1_svc(ptr , ptr , char *, char *, int , ptr_result *, struct svc_req *);
#define rpc_elf_load 51
extern  enum clnt_stat rpc_elf_load_1(mem_data , ptr , int *, CLIENT *);
extern  bool_t rpc_elf_load_1_svc(mem_data , ptr , int *, struct svc_req *);
#define rpc_elf_unload 52
extern  enum clnt_stat rpc_elf_unload_1(ptr , int *, CLIENT *);
extern  bool_t rpc_elf_unload_1_svc(ptr , int *, struct svc_req *);
#define rpc_register_var 53
extern  enum clnt_stat rpc_register_var_1(ptr , ptr , ptr , char *, int , size_t , int , int , int *, CLIENT *);
extern  bool_t rpc_register_var_1_svc(ptr , ptr , ptr , char *, int , size_t , int , int , int *, struct svc_req *);
#define rpc_init 54
extern  enum clnt_stat rpc_init_1(int , int *, CLIENT *);
extern  bool_t rpc_init_1_svc(int , int *, struct svc_req *);
#define rpc_ckp_restore 55
extern  enum clnt_stat rpc_ckp_restore_1(int , int *, CLIENT *);
extern  bool_t rpc_ckp_restore_1_svc(int , int *, struct svc_req *);
#define CUDA_CHOOSE_DEVICE 101
extern  enum clnt_stat cuda_choose_device_1(mem_data , int_result *, CLIENT *);
extern  bool_t cuda_choose_device_1_svc(mem_data , int_result *, struct svc_req *);
#define CUDA_DEVICE_GET_ATTRIBUTE 102
extern  enum clnt_stat cuda_device_get_attribute_1(int , int , int_result *, CLIENT *);
extern  bool_t cuda_device_get_attribute_1_svc(int , int , int_result *, struct svc_req *);
#define CUDA_DEVICE_GET_BY_PCI_BUS_ID 103
extern  enum clnt_stat cuda_device_get_by_pci_bus_id_1(char *, int_result *, CLIENT *);
extern  bool_t cuda_device_get_by_pci_bus_id_1_svc(char *, int_result *, struct svc_req *);
#define CUDA_DEVICE_GET_CACHE_CONFIG 104
extern  enum clnt_stat cuda_device_get_cache_config_1(int_result *, CLIENT *);
extern  bool_t cuda_device_get_cache_config_1_svc(int_result *, struct svc_req *);
#define CUDA_DEVICE_GET_LIMIT 105
extern  enum clnt_stat cuda_device_get_limit_1(int , u64_result *, CLIENT *);
extern  bool_t cuda_device_get_limit_1_svc(int , u64_result *, struct svc_req *);
#define CUDA_DEVICE_GET_P2P_ATTRIBUTE 107
extern  enum clnt_stat cuda_device_get_p2p_attribute_1(int , int , int , int_result *, CLIENT *);
extern  bool_t cuda_device_get_p2p_attribute_1_svc(int , int , int , int_result *, struct svc_req *);
#define CUDA_DEVICE_GET_PCI_BUS_ID 108
extern  enum clnt_stat cuda_device_get_pci_bus_id_1(int , int , str_result *, CLIENT *);
extern  bool_t cuda_device_get_pci_bus_id_1_svc(int , int , str_result *, struct svc_req *);
#define CUDA_DEVICE_GET_SHARED_MEM_CONFIG 109
extern  enum clnt_stat cuda_device_get_shared_mem_config_1(int_result *, CLIENT *);
extern  bool_t cuda_device_get_shared_mem_config_1_svc(int_result *, struct svc_req *);
#define CUDA_DEVICE_GET_STREAM_PRIORITY_RANGE 110
extern  enum clnt_stat cuda_device_get_stream_priority_range_1(dint_result *, CLIENT *);
extern  bool_t cuda_device_get_stream_priority_range_1_svc(dint_result *, struct svc_req *);
#define CUDA_DEVICE_GET_TEXTURE_LMW 111
extern  enum clnt_stat cuda_device_get_texture_lmw_1(cuda_channel_format_desc , int , u64_result *, CLIENT *);
extern  bool_t cuda_device_get_texture_lmw_1_svc(cuda_channel_format_desc , int , u64_result *, struct svc_req *);
#define CUDA_DEVICE_RESET 112
extern  enum clnt_stat cuda_device_reset_1(int *, CLIENT *);
extern  bool_t cuda_device_reset_1_svc(int *, struct svc_req *);
#define CUDA_DEVICE_SET_CACHE_CONFIG 113
extern  enum clnt_stat cuda_device_set_cache_config_1(int , int *, CLIENT *);
extern  bool_t cuda_device_set_cache_config_1_svc(int , int *, struct svc_req *);
#define CUDA_DEVICE_SET_LIMIT 114
extern  enum clnt_stat cuda_device_set_limit_1(int , size_t , int *, CLIENT *);
extern  bool_t cuda_device_set_limit_1_svc(int , size_t , int *, struct svc_req *);
#define CUDA_DEVICE_SET_SHARED_MEM_CONFIG 115
extern  enum clnt_stat cuda_device_set_shared_mem_config_1(int , int *, CLIENT *);
extern  bool_t cuda_device_set_shared_mem_config_1_svc(int , int *, struct svc_req *);
#define CUDA_DEVICE_SYNCHRONIZE 116
extern  enum clnt_stat cuda_device_synchronize_1(int *, CLIENT *);
extern  bool_t cuda_device_synchronize_1_svc(int *, struct svc_req *);
#define CUDA_GET_DEVICE 117
extern  enum clnt_stat cuda_get_device_1(int_result *, CLIENT *);
extern  bool_t cuda_get_device_1_svc(int_result *, struct svc_req *);
#define CUDA_GET_DEVICE_COUNT 118
extern  enum clnt_stat cuda_get_device_count_1(int_result *, CLIENT *);
extern  bool_t cuda_get_device_count_1_svc(int_result *, struct svc_req *);
#define CUDA_GET_DEVICE_FLAGS 119
extern  enum clnt_stat cuda_get_device_flags_1(int_result *, CLIENT *);
extern  bool_t cuda_get_device_flags_1_svc(int_result *, struct svc_req *);
#define CUDA_GET_DEVICE_PROPERTIES 120
extern  enum clnt_stat cuda_get_device_properties_1(int , cuda_device_prop_result *, CLIENT *);
extern  bool_t cuda_get_device_properties_1_svc(int , cuda_device_prop_result *, struct svc_req *);
#define CUDA_SET_DEVICE 126
extern  enum clnt_stat cuda_set_device_1(int , int *, CLIENT *);
extern  bool_t cuda_set_device_1_svc(int , int *, struct svc_req *);
#define CUDA_SET_DEVICE_FLAGS 127
extern  enum clnt_stat cuda_set_device_flags_1(int , int *, CLIENT *);
extern  bool_t cuda_set_device_flags_1_svc(int , int *, struct svc_req *);
#define CUDA_SET_VALID_DEVICES 128
extern  enum clnt_stat cuda_set_valid_devices_1(mem_data , int , int *, CLIENT *);
extern  bool_t cuda_set_valid_devices_1_svc(mem_data , int , int *, struct svc_req *);
#define CUDA_GET_ERROR_NAME 140
extern  enum clnt_stat cuda_get_error_name_1(int , str_result *, CLIENT *);
extern  bool_t cuda_get_error_name_1_svc(int , str_result *, struct svc_req *);
#define CUDA_GET_ERROR_STRING 141
extern  enum clnt_stat cuda_get_error_string_1(int , str_result *, CLIENT *);
extern  bool_t cuda_get_error_string_1_svc(int , str_result *, struct svc_req *);
#define CUDA_GET_LAST_ERROR 142
extern  enum clnt_stat cuda_get_last_error_1(int *, CLIENT *);
extern  bool_t cuda_get_last_error_1_svc(int *, struct svc_req *);
#define CUDA_PEEK_AT_LAST_ERROR 143
extern  enum clnt_stat cuda_peek_at_last_error_1(int *, CLIENT *);
extern  bool_t cuda_peek_at_last_error_1_svc(int *, struct svc_req *);
#define CUDA_CTX_RESET_PERSISTING_L2CACHE 250
extern  enum clnt_stat cuda_ctx_reset_persisting_l2cache_1(int *, CLIENT *);
extern  bool_t cuda_ctx_reset_persisting_l2cache_1_svc(int *, struct svc_req *);
#define CUDA_STREAM_COPY_ATTRIBUTES 254
extern  enum clnt_stat cuda_stream_copy_attributes_1(ptr , ptr , int *, CLIENT *);
extern  bool_t cuda_stream_copy_attributes_1_svc(ptr , ptr , int *, struct svc_req *);
#define CUDA_STREAM_CREATE 255
extern  enum clnt_stat cuda_stream_create_1(ptr_result *, CLIENT *);
extern  bool_t cuda_stream_create_1_svc(ptr_result *, struct svc_req *);
#define CUDA_STREAM_CREATE_WITH_FLAGS 256
extern  enum clnt_stat cuda_stream_create_with_flags_1(int , ptr_result *, CLIENT *);
extern  bool_t cuda_stream_create_with_flags_1_svc(int , ptr_result *, struct svc_req *);
#define CUDA_STREAM_CREATE_WITH_PRIORITY 257
extern  enum clnt_stat cuda_stream_create_with_priority_1(int , int , ptr_result *, CLIENT *);
extern  bool_t cuda_stream_create_with_priority_1_svc(int , int , ptr_result *, struct svc_req *);
#define CUDA_STREAM_DESTROY 258
extern  enum clnt_stat cuda_stream_destroy_1(ptr , int *, CLIENT *);
extern  bool_t cuda_stream_destroy_1_svc(ptr , int *, struct svc_req *);
#define CUDA_STREAM_GET_FLAGS 262
extern  enum clnt_stat cuda_stream_get_flags_1(ptr , int_result *, CLIENT *);
extern  bool_t cuda_stream_get_flags_1_svc(ptr , int_result *, struct svc_req *);
#define CUDA_STREAM_GET_PRIORITY 263
extern  enum clnt_stat cuda_stream_get_priority_1(ptr , int_result *, CLIENT *);
extern  bool_t cuda_stream_get_priority_1_svc(ptr , int_result *, struct svc_req *);
#define CUDA_STREAM_IS_CAPTURING 264
extern  enum clnt_stat cuda_stream_is_capturing_1(ptr , int_result *, CLIENT *);
extern  bool_t cuda_stream_is_capturing_1_svc(ptr , int_result *, struct svc_req *);
#define CUDA_STREAM_QUERY 265
extern  enum clnt_stat cuda_stream_query_1(ptr , int *, CLIENT *);
extern  bool_t cuda_stream_query_1_svc(ptr , int *, struct svc_req *);
#define CUDA_STREAM_SYNCHRONIZE 267
extern  enum clnt_stat cuda_stream_synchronize_1(ptr , int *, CLIENT *);
extern  bool_t cuda_stream_synchronize_1_svc(ptr , int *, struct svc_req *);
#define CUDA_STREAM_WAIT_EVENT 268
extern  enum clnt_stat cuda_stream_wait_event_1(ptr , ptr , int , int *, CLIENT *);
extern  bool_t cuda_stream_wait_event_1_svc(ptr , ptr , int , int *, struct svc_req *);
#define CUDA_THREAD_EXCHANGE_STREAM_CAPTURE_MODE 269
extern  enum clnt_stat cuda_thread_exchange_stream_capture_mode_1(int , int_result *, CLIENT *);
extern  bool_t cuda_thread_exchange_stream_capture_mode_1_svc(int , int_result *, struct svc_req *);
#define CUDA_EVENT_CREATE 280
extern  enum clnt_stat cuda_event_create_1(ptr_result *, CLIENT *);
extern  bool_t cuda_event_create_1_svc(ptr_result *, struct svc_req *);
#define CUDA_EVENT_CREATE_WITH_FLAGS 281
extern  enum clnt_stat cuda_event_create_with_flags_1(int , ptr_result *, CLIENT *);
extern  bool_t cuda_event_create_with_flags_1_svc(int , ptr_result *, struct svc_req *);
#define CUDA_EVENT_DESTROY 282
extern  enum clnt_stat cuda_event_destroy_1(ptr , int *, CLIENT *);
extern  bool_t cuda_event_destroy_1_svc(ptr , int *, struct svc_req *);
#define CUDA_EVENT_ELAPSED_TIME 283
extern  enum clnt_stat cuda_event_elapsed_time_1(ptr , ptr , float_result *, CLIENT *);
extern  bool_t cuda_event_elapsed_time_1_svc(ptr , ptr , float_result *, struct svc_req *);
#define CUDA_EVENT_QUERY 284
extern  enum clnt_stat cuda_event_query_1(ptr , int *, CLIENT *);
extern  bool_t cuda_event_query_1_svc(ptr , int *, struct svc_req *);
#define CUDA_EVENT_RECORD 285
extern  enum clnt_stat cuda_event_record_1(ptr , ptr , int *, CLIENT *);
extern  bool_t cuda_event_record_1_svc(ptr , ptr , int *, struct svc_req *);
#define CUDA_EVENT_RECORD_WITH_FLAGS 286
extern  enum clnt_stat cuda_event_record_with_flags_1(ptr , ptr , int , int *, CLIENT *);
extern  bool_t cuda_event_record_with_flags_1_svc(ptr , ptr , int , int *, struct svc_req *);
#define CUDA_EVENT_SYNCHRONIZE 287
extern  enum clnt_stat cuda_event_synchronize_1(ptr , int *, CLIENT *);
extern  bool_t cuda_event_synchronize_1_svc(ptr , int *, struct svc_req *);
#define CUDA_FUNC_GET_ATTRIBUTES 310
extern  enum clnt_stat cuda_func_get_attributes_1(ptr , mem_result *, CLIENT *);
extern  bool_t cuda_func_get_attributes_1_svc(ptr , mem_result *, struct svc_req *);
#define CUDA_FUNC_SET_ATTRIBUTES 311
extern  enum clnt_stat cuda_func_set_attributes_1(ptr , int , int , int *, CLIENT *);
extern  bool_t cuda_func_set_attributes_1_svc(ptr , int , int , int *, struct svc_req *);
#define CUDA_FUNC_SET_CACHE_CONFIG 312
extern  enum clnt_stat cuda_func_set_cache_config_1(ptr , int , int *, CLIENT *);
extern  bool_t cuda_func_set_cache_config_1_svc(ptr , int , int *, struct svc_req *);
#define CUDA_FUNC_SET_SHARED_MEM_CONFIG 313
extern  enum clnt_stat cuda_func_set_shared_mem_config_1(ptr , int , int *, CLIENT *);
extern  bool_t cuda_func_set_shared_mem_config_1_svc(ptr , int , int *, struct svc_req *);
#define CUDA_LAUNCH_COOPERATIVE_KERNEL 314
extern  enum clnt_stat cuda_launch_cooperative_kernel_1(ptr , rpc_dim3 , rpc_dim3 , mem_data , size_t , ptr , int *, CLIENT *);
extern  bool_t cuda_launch_cooperative_kernel_1_svc(ptr , rpc_dim3 , rpc_dim3 , mem_data , size_t , ptr , int *, struct svc_req *);
#define CUDA_LAUNCH_KERNEL 317
extern  enum clnt_stat cuda_launch_kernel_1(ptr , rpc_dim3 , rpc_dim3 , mem_data , size_t , ptr , int *, CLIENT *);
extern  bool_t cuda_launch_kernel_1_svc(ptr , rpc_dim3 , rpc_dim3 , mem_data , size_t , ptr , int *, struct svc_req *);
#define CUDA_OCCUPANCY_AVAILABLE_DSMPB 330
extern  enum clnt_stat cuda_occupancy_available_dsmpb_1(ptr , int , int , u64_result *, CLIENT *);
extern  bool_t cuda_occupancy_available_dsmpb_1_svc(ptr , int , int , u64_result *, struct svc_req *);
#define CUDA_OCCUPANCY_MAX_ACTIVE_BPM 331
extern  enum clnt_stat cuda_occupancy_max_active_bpm_1(ptr , int , size_t , int_result *, CLIENT *);
extern  bool_t cuda_occupancy_max_active_bpm_1_svc(ptr , int , size_t , int_result *, struct svc_req *);
#define CUDA_OCCUPANCY_MAX_ACTIVE_BPM_WITH_FLAGS 332
extern  enum clnt_stat cuda_occupancy_max_active_bpm_with_flags_1(ptr , int , size_t , int , int_result *, CLIENT *);
extern  bool_t cuda_occupancy_max_active_bpm_with_flags_1_svc(ptr , int , size_t , int , int_result *, struct svc_req *);
#define CUDA_ARRAY_GET_INFO 400
extern  enum clnt_stat cuda_array_get_info_1(ptr , mem_result *, CLIENT *);
extern  bool_t cuda_array_get_info_1_svc(ptr , mem_result *, struct svc_req *);
#define CUDA_ARRAY_GET_SPARSE_PROPERTIES 401
extern  enum clnt_stat cuda_array_get_sparse_properties_1(ptr , mem_result *, CLIENT *);
extern  bool_t cuda_array_get_sparse_properties_1_svc(ptr , mem_result *, struct svc_req *);
#define CUDA_FREE 402
extern  enum clnt_stat cuda_free_1(ptr , int *, CLIENT *);
extern  bool_t cuda_free_1_svc(ptr , int *, struct svc_req *);
#define CUDA_FREE_ARRAY 403
extern  enum clnt_stat cuda_free_array_1(ptr , int *, CLIENT *);
extern  bool_t cuda_free_array_1_svc(ptr , int *, struct svc_req *);
#define CUDA_FREE_HOST 404
extern  enum clnt_stat cuda_free_host_1(int , int *, CLIENT *);
extern  bool_t cuda_free_host_1_svc(int , int *, struct svc_req *);
#define CUDA_GET_SYMBOL_ADDRESS 407
extern  enum clnt_stat cuda_get_symbol_address_1(ptr , ptr_result *, CLIENT *);
extern  bool_t cuda_get_symbol_address_1_svc(ptr , ptr_result *, struct svc_req *);
#define CUDA_GET_SYMBOL_SIZE 408
extern  enum clnt_stat cuda_get_symbol_size_1(ptr , u64_result *, CLIENT *);
extern  bool_t cuda_get_symbol_size_1_svc(ptr , u64_result *, struct svc_req *);
#define CUDA_HOST_ALLOC 409
extern  enum clnt_stat cuda_host_alloc_1(size_t , u_int , sz_result *, CLIENT *);
extern  bool_t cuda_host_alloc_1_svc(size_t , u_int , sz_result *, struct svc_req *);
#define CUDA_HOST_ALLOC_REGSHM 477
extern  enum clnt_stat cuda_host_alloc_regshm_1(size_t , ptr , int *, CLIENT *);
extern  bool_t cuda_host_alloc_regshm_1_svc(size_t , ptr , int *, struct svc_req *);
#define CUDA_HOST_GET_DEVICE_POINTER 410
extern  enum clnt_stat cuda_host_get_device_pointer_1(ptr , int , ptr_result *, CLIENT *);
extern  bool_t cuda_host_get_device_pointer_1_svc(ptr , int , ptr_result *, struct svc_req *);
#define CUDA_HOST_GET_FLAGS 411
extern  enum clnt_stat cuda_host_get_flags_1(ptr , int_result *, CLIENT *);
extern  bool_t cuda_host_get_flags_1_svc(ptr , int_result *, struct svc_req *);
#define CUDA_MALLOC 414
extern  enum clnt_stat cuda_malloc_1(size_t , ptr_result *, CLIENT *);
extern  bool_t cuda_malloc_1_svc(size_t , ptr_result *, struct svc_req *);
#define CUDA_MALLOC_3D 415
extern  enum clnt_stat cuda_malloc_3d_1(size_t , size_t , size_t , pptr_result *, CLIENT *);
extern  bool_t cuda_malloc_3d_1_svc(size_t , size_t , size_t , pptr_result *, struct svc_req *);
#define CUDA_MALLOC_3D_ARRAY 416
extern  enum clnt_stat cuda_malloc_3d_array_1(cuda_channel_format_desc , size_t , size_t , size_t , int , ptr_result *, CLIENT *);
extern  bool_t cuda_malloc_3d_array_1_svc(cuda_channel_format_desc , size_t , size_t , size_t , int , ptr_result *, struct svc_req *);
#define CUDA_MALLOC_ARRAY 417
extern  enum clnt_stat cuda_malloc_array_1(cuda_channel_format_desc , size_t , size_t , int , ptr_result *, CLIENT *);
extern  bool_t cuda_malloc_array_1_svc(cuda_channel_format_desc , size_t , size_t , int , ptr_result *, struct svc_req *);
#define CUDA_MALLOC_PITCH 421
extern  enum clnt_stat cuda_malloc_pitch_1(size_t , size_t , ptrsz_result *, CLIENT *);
extern  bool_t cuda_malloc_pitch_1_svc(size_t , size_t , ptrsz_result *, struct svc_req *);
#define CUDA_MEM_ADVISE 422
extern  enum clnt_stat cuda_mem_advise_1(ptr , size_t , int , int , int *, CLIENT *);
extern  bool_t cuda_mem_advise_1_svc(ptr , size_t , int , int , int *, struct svc_req *);
#define CUDA_MEM_GET_INFO 423
extern  enum clnt_stat cuda_mem_get_info_1(dsz_result *, CLIENT *);
extern  bool_t cuda_mem_get_info_1_svc(dsz_result *, struct svc_req *);
#define CUDA_MEM_PREFETCH_ASYNC 424
extern  enum clnt_stat cuda_mem_prefetch_async_1(ptr , size_t , int , ptr , int *, CLIENT *);
extern  bool_t cuda_mem_prefetch_async_1_svc(ptr , size_t , int , ptr , int *, struct svc_req *);
#define CUDA_MEMCPY_HTOD 440
extern  enum clnt_stat cuda_memcpy_htod_1(ptr , mem_data , size_t , int *, CLIENT *);
extern  bool_t cuda_memcpy_htod_1_svc(ptr , mem_data , size_t , int *, struct svc_req *);
#define CUDA_MEMCPY_DTOH 441
extern  enum clnt_stat cuda_memcpy_dtoh_1(ptr , size_t , mem_result *, CLIENT *);
extern  bool_t cuda_memcpy_dtoh_1_svc(ptr , size_t , mem_result *, struct svc_req *);
#define CUDA_MEMCPY_SHM 442
extern  enum clnt_stat cuda_memcpy_shm_1(int , ptr , size_t , int , int *, CLIENT *);
extern  bool_t cuda_memcpy_shm_1_svc(int , ptr , size_t , int , int *, struct svc_req *);
#define CUDA_MEMCPY_DTOD 443
extern  enum clnt_stat cuda_memcpy_dtod_1(ptr , ptr , size_t , int *, CLIENT *);
extern  bool_t cuda_memcpy_dtod_1_svc(ptr , ptr , size_t , int *, struct svc_req *);
#define CUDA_MEMCPY_TO_SYMBOL 445
extern  enum clnt_stat cuda_memcpy_to_symbol_1(ptr , mem_data , size_t , size_t , int *, CLIENT *);
extern  bool_t cuda_memcpy_to_symbol_1_svc(ptr , mem_data , size_t , size_t , int *, struct svc_req *);
#define CUDA_MEMCPY_TO_SYMBOL_SHM 446
extern  enum clnt_stat cuda_memcpy_to_symbol_shm_1(int , ptr , size_t , size_t , int , int *, CLIENT *);
extern  bool_t cuda_memcpy_to_symbol_shm_1_svc(int , ptr , size_t , size_t , int , int *, struct svc_req *);
#define CUDA_MEMCPY_IB 447
extern  enum clnt_stat cuda_memcpy_ib_1(int , ptr , size_t , int , int *, CLIENT *);
extern  bool_t cuda_memcpy_ib_1_svc(int , ptr , size_t , int , int *, struct svc_req *);
#define CUDA_MEMCPY_MT_HTOD 449
extern  enum clnt_stat cuda_memcpy_mt_htod_1(ptr , size_t , int , dint_result *, CLIENT *);
extern  bool_t cuda_memcpy_mt_htod_1_svc(ptr , size_t , int , dint_result *, struct svc_req *);
#define CUDA_MEMCPY_MT_DTOH 450
extern  enum clnt_stat cuda_memcpy_mt_dtoh_1(ptr , size_t , int , dint_result *, CLIENT *);
extern  bool_t cuda_memcpy_mt_dtoh_1_svc(ptr , size_t , int , dint_result *, struct svc_req *);
#define CUDA_MEMCPY_MT_SYNC 451
extern  enum clnt_stat cuda_memcpy_mt_sync_1(int , int *, CLIENT *);
extern  bool_t cuda_memcpy_mt_sync_1_svc(int , int *, struct svc_req *);
#define CUDA_MEMSET 470
extern  enum clnt_stat cuda_memset_1(ptr , int , size_t , int *, CLIENT *);
extern  bool_t cuda_memset_1_svc(ptr , int , size_t , int *, struct svc_req *);
#define CUDA_MEMSET_2D 471
extern  enum clnt_stat cuda_memset_2d_1(ptr , size_t , int , size_t , size_t , int *, CLIENT *);
extern  bool_t cuda_memset_2d_1_svc(ptr , size_t , int , size_t , size_t , int *, struct svc_req *);
#define CUDA_MEMSET_2D_ASYNC 472
extern  enum clnt_stat cuda_memset_2d_async_1(ptr , size_t , int , size_t , size_t , ptr , int *, CLIENT *);
extern  bool_t cuda_memset_2d_async_1_svc(ptr , size_t , int , size_t , size_t , ptr , int *, struct svc_req *);
#define CUDA_MEMSET_3D 473
extern  enum clnt_stat cuda_memset_3d_1(size_t , ptr , size_t , size_t , int , size_t , size_t , size_t , int *, CLIENT *);
extern  bool_t cuda_memset_3d_1_svc(size_t , ptr , size_t , size_t , int , size_t , size_t , size_t , int *, struct svc_req *);
#define CUDA_MEMSET_3D_ASYNC 474
extern  enum clnt_stat cuda_memset_3d_async_1(size_t , ptr , size_t , size_t , int , size_t , size_t , size_t , ptr , int *, CLIENT *);
extern  bool_t cuda_memset_3d_async_1_svc(size_t , ptr , size_t , size_t , int , size_t , size_t , size_t , ptr , int *, struct svc_req *);
#define CUDA_MEMSET_ASYNC 475
extern  enum clnt_stat cuda_memset_async_1(ptr , int , size_t , ptr , int *, CLIENT *);
extern  bool_t cuda_memset_async_1_svc(ptr , int , size_t , ptr , int *, struct svc_req *);
#define CUDA_DEVICE_CAN_ACCESS_PEER 500
extern  enum clnt_stat cuda_device_can_access_peer_1(int , int , int_result *, CLIENT *);
extern  bool_t cuda_device_can_access_peer_1_svc(int , int , int_result *, struct svc_req *);
#define CUDA_DEVICE_DISABLE_PEER_ACCESS 501
extern  enum clnt_stat cuda_device_disable_peer_access_1(int , int *, CLIENT *);
extern  bool_t cuda_device_disable_peer_access_1_svc(int , int *, struct svc_req *);
#define CUDA_DEVICE_ENABLE_PEER_ACCESS 502
extern  enum clnt_stat cuda_device_enable_peer_access_1(int , int , int *, CLIENT *);
extern  bool_t cuda_device_enable_peer_access_1_svc(int , int , int *, struct svc_req *);
#define CUDA_DRIVER_GET_VERSION 510
extern  enum clnt_stat cuda_driver_get_version_1(int_result *, CLIENT *);
extern  bool_t cuda_driver_get_version_1_svc(int_result *, struct svc_req *);
#define CUDA_RUNTIME_GET_VERSION 511
extern  enum clnt_stat cuda_runtime_get_version_1(int_result *, CLIENT *);
extern  bool_t cuda_runtime_get_version_1_svc(int_result *, struct svc_req *);
#define CUDA_PROFILER_START 701
extern  enum clnt_stat cuda_profiler_start_1(int *, CLIENT *);
extern  bool_t cuda_profiler_start_1_svc(int *, struct svc_req *);
#define CUDA_PROFILER_STOP 702
extern  enum clnt_stat cuda_profiler_stop_1(int *, CLIENT *);
extern  bool_t cuda_profiler_stop_1_svc(int *, struct svc_req *);
#define rpc_cuDeviceGetCount 1002
extern  enum clnt_stat rpc_cudevicegetcount_1(int_result *, CLIENT *);
extern  bool_t rpc_cudevicegetcount_1_svc(int_result *, struct svc_req *);
#define rpc_cuInit 1003
extern  enum clnt_stat rpc_cuinit_1(int , int *, CLIENT *);
extern  bool_t rpc_cuinit_1_svc(int , int *, struct svc_req *);
#define rpc_cuDriverGetVersion 1004
extern  enum clnt_stat rpc_cudrivergetversion_1(int_result *, CLIENT *);
extern  bool_t rpc_cudrivergetversion_1_svc(int_result *, struct svc_req *);
#define rpc_cuDeviceGet 1005
extern  enum clnt_stat rpc_cudeviceget_1(int , int_result *, CLIENT *);
extern  bool_t rpc_cudeviceget_1_svc(int , int_result *, struct svc_req *);
#define rpc_cuDeviceGetName 1006
extern  enum clnt_stat rpc_cudevicegetname_1(int , str_result *, CLIENT *);
extern  bool_t rpc_cudevicegetname_1_svc(int , str_result *, struct svc_req *);
#define rpc_cuDeviceTotalMem 1007
extern  enum clnt_stat rpc_cudevicetotalmem_1(int , u64_result *, CLIENT *);
extern  bool_t rpc_cudevicetotalmem_1_svc(int , u64_result *, struct svc_req *);
#define rpc_cuDeviceGetAttribute 1008
extern  enum clnt_stat rpc_cudevicegetattribute_1(int , int , int_result *, CLIENT *);
extern  bool_t rpc_cudevicegetattribute_1_svc(int , int , int_result *, struct svc_req *);
#define rpc_cuDeviceGetUuid 1009
extern  enum clnt_stat rpc_cudevicegetuuid_1(int , str_result *, CLIENT *);
extern  bool_t rpc_cudevicegetuuid_1_svc(int , str_result *, struct svc_req *);
#define rpc_cuCtxGetCurrent 1010
extern  enum clnt_stat rpc_cuctxgetcurrent_1(ptr_result *, CLIENT *);
extern  bool_t rpc_cuctxgetcurrent_1_svc(ptr_result *, struct svc_req *);
#define rpc_cuCtxSetCurrent 1011
extern  enum clnt_stat rpc_cuctxsetcurrent_1(ptr , int *, CLIENT *);
extern  bool_t rpc_cuctxsetcurrent_1_svc(ptr , int *, struct svc_req *);
#define rpc_cuDevicePrimaryCtxRetain 1012
extern  enum clnt_stat rpc_cudeviceprimaryctxretain_1(int , ptr_result *, CLIENT *);
extern  bool_t rpc_cudeviceprimaryctxretain_1_svc(int , ptr_result *, struct svc_req *);
#define rpc_cuModuleGetFunction 1013
extern  enum clnt_stat rpc_cumodulegetfunction_1(ptr , char *, ptr_result *, CLIENT *);
extern  bool_t rpc_cumodulegetfunction_1_svc(ptr , char *, ptr_result *, struct svc_req *);
#define rpc_cuMemAlloc 1015
extern  enum clnt_stat rpc_cumemalloc_1(ptr , ptr_result *, CLIENT *);
extern  bool_t rpc_cumemalloc_1_svc(ptr , ptr_result *, struct svc_req *);
#define rpc_cuCtxGetDevice 1016
extern  enum clnt_stat rpc_cuctxgetdevice_1(int_result *, CLIENT *);
extern  bool_t rpc_cuctxgetdevice_1_svc(int_result *, struct svc_req *);
#define rpc_cuMemcpyHtoD 1017
extern  enum clnt_stat rpc_cumemcpyhtod_1(ptr , mem_data , int *, CLIENT *);
extern  bool_t rpc_cumemcpyhtod_1_svc(ptr , mem_data , int *, struct svc_req *);
#define rpc_cuLaunchKernel 1018
extern  enum clnt_stat rpc_culaunchkernel_1(ptr , u_int , u_int , u_int , u_int , u_int , u_int , u_int , ptr , mem_data , int *, CLIENT *);
extern  bool_t rpc_culaunchkernel_1_svc(ptr , u_int , u_int , u_int , u_int , u_int , u_int , u_int , ptr , mem_data , int *, struct svc_req *);
#define rpc_cuModuleLoad 1019
extern  enum clnt_stat rpc_cumoduleload_1(char *, ptr_result *, CLIENT *);
extern  bool_t rpc_cumoduleload_1_svc(char *, ptr_result *, struct svc_req *);
#define rpc_cuGetErrorString 1020
extern  enum clnt_stat rpc_cugeterrorstring_1(int , str_result *, CLIENT *);
extern  bool_t rpc_cugeterrorstring_1_svc(int , str_result *, struct svc_req *);
#define rpc_cuModuleUnload 1021
extern  enum clnt_stat rpc_cumoduleunload_1(ptr , int *, CLIENT *);
extern  bool_t rpc_cumoduleunload_1_svc(ptr , int *, struct svc_req *);
#define rpc_cuDevicePrimaryCtxGetState 1022
extern  enum clnt_stat rpc_cudeviceprimaryctxgetstate_1(int , dint_result *, CLIENT *);
extern  bool_t rpc_cudeviceprimaryctxgetstate_1_svc(int , dint_result *, struct svc_req *);
#define rpc_cuDeviceGetProperties 1023
extern  enum clnt_stat rpc_cudevicegetproperties_1(int , mem_result *, CLIENT *);
extern  bool_t rpc_cudevicegetproperties_1_svc(int , mem_result *, struct svc_req *);
#define rpc_cuDeviceComputeCapability 1024
extern  enum clnt_stat rpc_cudevicecomputecapability_1(int , dint_result *, CLIENT *);
extern  bool_t rpc_cudevicecomputecapability_1_svc(int , dint_result *, struct svc_req *);
#define rpc_cuDeviceGetP2PAttribute 1025
extern  enum clnt_stat rpc_cudevicegetp2pattribute_1(int , ptr , ptr , int_result *, CLIENT *);
extern  bool_t rpc_cudevicegetp2pattribute_1_svc(int , ptr , ptr , int_result *, struct svc_req *);
#define rpc_cuModuleLoadData 1026
extern  enum clnt_stat rpc_cumoduleloaddata_1(mem_data , ptr_result *, CLIENT *);
extern  bool_t rpc_cumoduleloaddata_1_svc(mem_data , ptr_result *, struct svc_req *);
#define rpc_cusolverDnCreate 2001
extern  enum clnt_stat rpc_cusolverdncreate_1(ptr_result *, CLIENT *);
extern  bool_t rpc_cusolverdncreate_1_svc(ptr_result *, struct svc_req *);
#define rpc_cusolverDnSetStream 2002
extern  enum clnt_stat rpc_cusolverdnsetstream_1(ptr , ptr , int *, CLIENT *);
extern  bool_t rpc_cusolverdnsetstream_1_svc(ptr , ptr , int *, struct svc_req *);
#define rpc_cusolverDnDgetrf_bufferSize 2003
extern  enum clnt_stat rpc_cusolverdndgetrf_buffersize_1(ptr , int , int , ptr , int , int_result *, CLIENT *);
extern  bool_t rpc_cusolverdndgetrf_buffersize_1_svc(ptr , int , int , ptr , int , int_result *, struct svc_req *);
#define rpc_cusolverDnDgetrf 2004
extern  enum clnt_stat rpc_cusolverdndgetrf_1(ptr , int , int , ptr , int , ptr , ptr , ptr , int *, CLIENT *);
extern  bool_t rpc_cusolverdndgetrf_1_svc(ptr , int , int , ptr , int , ptr , ptr , ptr , int *, struct svc_req *);
#define rpc_cusolverDnDgetrs 2005
extern  enum clnt_stat rpc_cusolverdndgetrs_1(ptr , int , int , int , ptr , int , ptr , ptr , int , ptr , int *, CLIENT *);
extern  bool_t rpc_cusolverdndgetrs_1_svc(ptr , int , int , int , ptr , int , ptr , ptr , int , ptr , int *, struct svc_req *);
#define rpc_cusolverDnDestroy 2006
extern  enum clnt_stat rpc_cusolverdndestroy_1(ptr , int *, CLIENT *);
extern  bool_t rpc_cusolverdndestroy_1_svc(ptr , int *, struct svc_req *);
#define rpc_cublasCreate 3001
extern  enum clnt_stat rpc_cublascreate_1(ptr_result *, CLIENT *);
extern  bool_t rpc_cublascreate_1_svc(ptr_result *, struct svc_req *);
#define rpc_cublasDgemm 3002
extern  enum clnt_stat rpc_cublasdgemm_1(ptr , int , int , int , int , int , double , ptr , int , ptr , int , double , ptr , int , int *, CLIENT *);
extern  bool_t rpc_cublasdgemm_1_svc(ptr , int , int , int , int , int , double , ptr , int , ptr , int , double , ptr , int , int *, struct svc_req *);
#define rpc_cublasDestroy 3003
extern  enum clnt_stat rpc_cublasdestroy_1(ptr , int *, CLIENT *);
extern  bool_t rpc_cublasdestroy_1_svc(ptr , int *, struct svc_req *);
#define rpc_cublasSgemm 3004
extern  enum clnt_stat rpc_cublassgemm_1(ptr , int , int , int , int , int , float , ptr , int , ptr , int , float , ptr , int , int *, CLIENT *);
extern  bool_t rpc_cublassgemm_1_svc(ptr , int , int , int , int , int , float , ptr , int , ptr , int , float , ptr , int , int *, struct svc_req *);
#define rpc_cublasSgemv 3005
extern  enum clnt_stat rpc_cublassgemv_1(ptr , int , int , int , float , ptr , int , ptr , int , float , ptr , int , int *, CLIENT *);
extern  bool_t rpc_cublassgemv_1_svc(ptr , int , int , int , float , ptr , int , ptr , int , float , ptr , int , int *, struct svc_req *);
#define rpc_cublasDgemv 3006
extern  enum clnt_stat rpc_cublasdgemv_1(ptr , int , int , int , double , ptr , int , ptr , int , double , ptr , int , int *, CLIENT *);
extern  bool_t rpc_cublasdgemv_1_svc(ptr , int , int , int , double , ptr , int , ptr , int , double , ptr , int , int *, struct svc_req *);
#define rpc_cublasSgemmEx 3007
extern  enum clnt_stat rpc_cublassgemmex_1(ptr , int , int , int , int , int , float , ptr , int , int , ptr , int , int , float , ptr , int , int , int *, CLIENT *);
extern  bool_t rpc_cublassgemmex_1_svc(ptr , int , int , int , int , int , float , ptr , int , int , ptr , int , int , float , ptr , int , int , int *, struct svc_req *);
#define rpc_cublasSetStream 3008
extern  enum clnt_stat rpc_cublassetstream_1(ptr , ptr , int *, CLIENT *);
extern  bool_t rpc_cublassetstream_1_svc(ptr , ptr , int *, struct svc_req *);
#define rpc_cublasSetWorkspace 3009
extern  enum clnt_stat rpc_cublassetworkspace_1(ptr , ptr , size_t , int *, CLIENT *);
extern  bool_t rpc_cublassetworkspace_1_svc(ptr , ptr , size_t , int *, struct svc_req *);
#define rpc_cublasSetMathMode 3010
extern  enum clnt_stat rpc_cublassetmathmode_1(ptr , int , int *, CLIENT *);
extern  bool_t rpc_cublassetmathmode_1_svc(ptr , int , int *, struct svc_req *);
#define rpc_nvmlDeviceGetCount_v2 4000
extern  enum clnt_stat rpc_nvmldevicegetcount_v2_1(int_result *, CLIENT *);
extern  bool_t rpc_nvmldevicegetcount_v2_1_svc(int_result *, struct svc_req *);
#define rpc_nvmlInitWithFlags 4001
extern  enum clnt_stat rpc_nvmlinitwithflags_1(int , int *, CLIENT *);
extern  bool_t rpc_nvmlinitwithflags_1_svc(int , int *, struct svc_req *);
#define rpc_nvmlInit_v2 4002
extern  enum clnt_stat rpc_nvmlinit_v2_1(int *, CLIENT *);
extern  bool_t rpc_nvmlinit_v2_1_svc(int *, struct svc_req *);
#define rpc_nvmlShutdown 4003
extern  enum clnt_stat rpc_nvmlshutdown_1(int *, CLIENT *);
extern  bool_t rpc_nvmlshutdown_1_svc(int *, struct svc_req *);
#define rpc_cudnnGetVersion 5000
extern  enum clnt_stat rpc_cudnngetversion_1(size_t *, CLIENT *);
extern  bool_t rpc_cudnngetversion_1_svc(size_t *, struct svc_req *);
#define rpc_cudnnGetMaxDeviceVersion 5001
extern  enum clnt_stat rpc_cudnngetmaxdeviceversion_1(size_t *, CLIENT *);
extern  bool_t rpc_cudnngetmaxdeviceversion_1_svc(size_t *, struct svc_req *);
#define rpc_cudnnGetCudartVersion 5002
extern  enum clnt_stat rpc_cudnngetcudartversion_1(size_t *, CLIENT *);
extern  bool_t rpc_cudnngetcudartversion_1_svc(size_t *, struct svc_req *);
#define rpc_cudnnGetErrorString 5003
extern  enum clnt_stat rpc_cudnngeterrorstring_1(int , char **, CLIENT *);
extern  bool_t rpc_cudnngeterrorstring_1_svc(int , char **, struct svc_req *);
#define rpc_cudnnQueryRuntimeError 5004
extern  enum clnt_stat rpc_cudnnqueryruntimeerror_1(ptr , int , int_result *, CLIENT *);
extern  bool_t rpc_cudnnqueryruntimeerror_1_svc(ptr , int , int_result *, struct svc_req *);
#define rpc_cudnnGetProperty 5005
extern  enum clnt_stat rpc_cudnngetproperty_1(int , int_result *, CLIENT *);
extern  bool_t rpc_cudnngetproperty_1_svc(int , int_result *, struct svc_req *);
#define rpc_cudnnCreate 5006
extern  enum clnt_stat rpc_cudnncreate_1(ptr_result *, CLIENT *);
extern  bool_t rpc_cudnncreate_1_svc(ptr_result *, struct svc_req *);
#define rpc_cudnnDestroy 5007
extern  enum clnt_stat rpc_cudnndestroy_1(ptr , int *, CLIENT *);
extern  bool_t rpc_cudnndestroy_1_svc(ptr , int *, struct svc_req *);
#define rpc_cudnnSetStream 5008
extern  enum clnt_stat rpc_cudnnsetstream_1(ptr , ptr , int *, CLIENT *);
extern  bool_t rpc_cudnnsetstream_1_svc(ptr , ptr , int *, struct svc_req *);
#define rpc_cudnnGetStream 5009
extern  enum clnt_stat rpc_cudnngetstream_1(ptr , ptr_result *, CLIENT *);
extern  bool_t rpc_cudnngetstream_1_svc(ptr , ptr_result *, struct svc_req *);
#define rpc_cudnnCreateTensorDescriptor 5010
extern  enum clnt_stat rpc_cudnncreatetensordescriptor_1(ptr_result *, CLIENT *);
extern  bool_t rpc_cudnncreatetensordescriptor_1_svc(ptr_result *, struct svc_req *);
#define rpc_cudnnSetTensor4dDescriptor 5011
extern  enum clnt_stat rpc_cudnnsettensor4ddescriptor_1(ptr , int , int , int , int , int , int , int *, CLIENT *);
extern  bool_t rpc_cudnnsettensor4ddescriptor_1_svc(ptr , int , int , int , int , int , int , int *, struct svc_req *);
#define rpc_cudnnSetTensor4dDescriptorEx 5012
extern  enum clnt_stat rpc_cudnnsettensor4ddescriptorex_1(ptr , int , int , int , int , int , int , int , int , int , int *, CLIENT *);
extern  bool_t rpc_cudnnsettensor4ddescriptorex_1_svc(ptr , int , int , int , int , int , int , int , int , int , int *, struct svc_req *);
#define rpc_cudnnGetTensor4dDescriptor 5013
extern  enum clnt_stat rpc_cudnngettensor4ddescriptor_1(ptr , int9_result *, CLIENT *);
extern  bool_t rpc_cudnngettensor4ddescriptor_1_svc(ptr , int9_result *, struct svc_req *);
#define rpc_cudnnSetTensorNdDescriptor 5014
extern  enum clnt_stat rpc_cudnnsettensornddescriptor_1(ptr , int , int , mem_data , mem_data , int *, CLIENT *);
extern  bool_t rpc_cudnnsettensornddescriptor_1_svc(ptr , int , int , mem_data , mem_data , int *, struct svc_req *);
#define rpc_cudnnSetTensorNdDescriptorEx 5015
extern  enum clnt_stat rpc_cudnnsettensornddescriptorex_1(ptr , int , int , int , mem_data , int *, CLIENT *);
extern  bool_t rpc_cudnnsettensornddescriptorex_1_svc(ptr , int , int , int , mem_data , int *, struct svc_req *);
#define rpc_cudnnGetTensorNdDescriptor 5016
extern  enum clnt_stat rpc_cudnngettensornddescriptor_1(ptr , int , mem_result *, CLIENT *);
extern  bool_t rpc_cudnngettensornddescriptor_1_svc(ptr , int , mem_result *, struct svc_req *);
#define rpc_cudnnGetTensorSizeInBytes 5017
extern  enum clnt_stat rpc_cudnngettensorsizeinbytes_1(ptr , sz_result *, CLIENT *);
extern  bool_t rpc_cudnngettensorsizeinbytes_1_svc(ptr , sz_result *, struct svc_req *);
#define rpc_cudnnDestroyTensorDescriptor 5018
extern  enum clnt_stat rpc_cudnndestroytensordescriptor_1(ptr , int *, CLIENT *);
extern  bool_t rpc_cudnndestroytensordescriptor_1_svc(ptr , int *, struct svc_req *);
#define rpc_cudnnTransformTensor 5024
extern  enum clnt_stat rpc_cudnntransformtensor_1(ptr , cudnn_scaling_t , ptr , ptr , cudnn_scaling_t , ptr , ptr , int *, CLIENT *);
extern  bool_t rpc_cudnntransformtensor_1_svc(ptr , cudnn_scaling_t , ptr , ptr , cudnn_scaling_t , ptr , ptr , int *, struct svc_req *);
#define rpc_cudnnAddTensor 5026
extern  enum clnt_stat rpc_cudnnaddtensor_1(ptr , cudnn_scaling_t , ptr , ptr , cudnn_scaling_t , ptr , ptr , int *, CLIENT *);
extern  bool_t rpc_cudnnaddtensor_1_svc(ptr , cudnn_scaling_t , ptr , ptr , cudnn_scaling_t , ptr , ptr , int *, struct svc_req *);
#define rpc_cudnnCreateFilterDescriptor 5041
extern  enum clnt_stat rpc_cudnncreatefilterdescriptor_1(ptr_result *, CLIENT *);
extern  bool_t rpc_cudnncreatefilterdescriptor_1_svc(ptr_result *, struct svc_req *);
#define rpc_cudnnSetFilter4dDescriptor 5042
extern  enum clnt_stat rpc_cudnnsetfilter4ddescriptor_1(ptr , int , int , int , int , int , int , int *, CLIENT *);
extern  bool_t rpc_cudnnsetfilter4ddescriptor_1_svc(ptr , int , int , int , int , int , int , int *, struct svc_req *);
#define rpc_cudnnGetFilter4dDescriptor 5043
extern  enum clnt_stat rpc_cudnngetfilter4ddescriptor_1(ptr , int6_result *, CLIENT *);
extern  bool_t rpc_cudnngetfilter4ddescriptor_1_svc(ptr , int6_result *, struct svc_req *);
#define rpc_cudnnSetFilterNdDescriptor 5044
extern  enum clnt_stat rpc_cudnnsetfilternddescriptor_1(ptr , int , int , int , mem_data , int *, CLIENT *);
extern  bool_t rpc_cudnnsetfilternddescriptor_1_svc(ptr , int , int , int , mem_data , int *, struct svc_req *);
#define rpc_cudnnGetFilterNdDescriptor 5045
extern  enum clnt_stat rpc_cudnngetfilternddescriptor_1(ptr , int , mem_result *, CLIENT *);
extern  bool_t rpc_cudnngetfilternddescriptor_1_svc(ptr , int , mem_result *, struct svc_req *);
#define rpc_cudnnGetFilterSizeInBytes 5046
extern  enum clnt_stat rpc_cudnngetfiltersizeinbytes_1(ptr , sz_result *, CLIENT *);
extern  bool_t rpc_cudnngetfiltersizeinbytes_1_svc(ptr , sz_result *, struct svc_req *);
#define rpc_cudnnTransformFilter 5047
extern  enum clnt_stat rpc_cudnntransformfilter_1(ptr , ptr , cudnn_scaling_t , ptr , ptr , cudnn_scaling_t , ptr , ptr , int *, CLIENT *);
extern  bool_t rpc_cudnntransformfilter_1_svc(ptr , ptr , cudnn_scaling_t , ptr , ptr , cudnn_scaling_t , ptr , ptr , int *, struct svc_req *);
#define rpc_cudnnDestroyFilterDescriptor 5048
extern  enum clnt_stat rpc_cudnndestroyfilterdescriptor_1(ptr , int *, CLIENT *);
extern  bool_t rpc_cudnndestroyfilterdescriptor_1_svc(ptr , int *, struct svc_req *);
#define rpc_cudnnSoftmaxForward 5049
extern  enum clnt_stat rpc_cudnnsoftmaxforward_1(ptr , int , int , cudnn_scaling_t , ptr , ptr , cudnn_scaling_t , ptr , ptr , int *, CLIENT *);
extern  bool_t rpc_cudnnsoftmaxforward_1_svc(ptr , int , int , cudnn_scaling_t , ptr , ptr , cudnn_scaling_t , ptr , ptr , int *, struct svc_req *);
#define rpc_cudnnCreatePoolingDescriptor 5050
extern  enum clnt_stat rpc_cudnncreatepoolingdescriptor_1(ptr_result *, CLIENT *);
extern  bool_t rpc_cudnncreatepoolingdescriptor_1_svc(ptr_result *, struct svc_req *);
#define rpc_cudnnSetPooling2dDescriptor 5051
extern  enum clnt_stat rpc_cudnnsetpooling2ddescriptor_1(ptr , int , int , int , int , int , int , int , int , int *, CLIENT *);
extern  bool_t rpc_cudnnsetpooling2ddescriptor_1_svc(ptr , int , int , int , int , int , int , int , int , int *, struct svc_req *);
#define rpc_cudnnGetPooling2dDescriptor 5052
extern  enum clnt_stat rpc_cudnngetpooling2ddescriptor_1(ptr , int8_result *, CLIENT *);
extern  bool_t rpc_cudnngetpooling2ddescriptor_1_svc(ptr , int8_result *, struct svc_req *);
#define rpc_cudnnSetPoolingNdDescriptor 5053
extern  enum clnt_stat rpc_cudnnsetpoolingnddescriptor_1(ptr , int , int , int , mem_data , mem_data , mem_data , int *, CLIENT *);
extern  bool_t rpc_cudnnsetpoolingnddescriptor_1_svc(ptr , int , int , int , mem_data , mem_data , mem_data , int *, struct svc_req *);
#define rpc_cudnnGetPoolingNdDescriptor 5054
extern  enum clnt_stat rpc_cudnngetpoolingnddescriptor_1(ptr , int , mem_result *, CLIENT *);
extern  bool_t rpc_cudnngetpoolingnddescriptor_1_svc(ptr , int , mem_result *, struct svc_req *);
#define rpc_cudnnGetPoolingNdForwardOutputDim 5055
extern  enum clnt_stat rpc_cudnngetpoolingndforwardoutputdim_1(ptr , ptr , int , mem_result *, CLIENT *);
extern  bool_t rpc_cudnngetpoolingndforwardoutputdim_1_svc(ptr , ptr , int , mem_result *, struct svc_req *);
#define rpc_cudnnGetPooling2dForwardOutputDim 5056
extern  enum clnt_stat rpc_cudnngetpooling2dforwardoutputdim_1(ptr , ptr , int4_result *, CLIENT *);
extern  bool_t rpc_cudnngetpooling2dforwardoutputdim_1_svc(ptr , ptr , int4_result *, struct svc_req *);
#define rpc_cudnnDestroyPoolingDescriptor 5057
extern  enum clnt_stat rpc_cudnndestroypoolingdescriptor_1(ptr , int *, CLIENT *);
extern  bool_t rpc_cudnndestroypoolingdescriptor_1_svc(ptr , int *, struct svc_req *);
#define rpc_cudnnPoolingForward 5058
extern  enum clnt_stat rpc_cudnnpoolingforward_1(ptr , ptr , cudnn_scaling_t , ptr , ptr , cudnn_scaling_t , ptr , ptr , int *, CLIENT *);
extern  bool_t rpc_cudnnpoolingforward_1_svc(ptr , ptr , cudnn_scaling_t , ptr , ptr , cudnn_scaling_t , ptr , ptr , int *, struct svc_req *);
#define rpc_cudnnCreateActivationDescriptor 5059
extern  enum clnt_stat rpc_cudnncreateactivationdescriptor_1(ptr_result *, CLIENT *);
extern  bool_t rpc_cudnncreateactivationdescriptor_1_svc(ptr_result *, struct svc_req *);
#define rpc_cudnnSetActivationDescriptor 5060
extern  enum clnt_stat rpc_cudnnsetactivationdescriptor_1(ptr , int , int , double , int *, CLIENT *);
extern  bool_t rpc_cudnnsetactivationdescriptor_1_svc(ptr , int , int , double , int *, struct svc_req *);
#define rpc_cudnnGetActivationDescriptor 5061
extern  enum clnt_stat rpc_cudnngetactivationdescriptor_1(ptr , int2d1_result *, CLIENT *);
extern  bool_t rpc_cudnngetactivationdescriptor_1_svc(ptr , int2d1_result *, struct svc_req *);
#define rpc_cudnnSetActivationDescriptorSwishBeta 5062
extern  enum clnt_stat rpc_cudnnsetactivationdescriptorswishbeta_1(ptr , double , int *, CLIENT *);
extern  bool_t rpc_cudnnsetactivationdescriptorswishbeta_1_svc(ptr , double , int *, struct svc_req *);
#define rpc_cudnnGetActivationDescriptorSwishBeta 5063
extern  enum clnt_stat rpc_cudnngetactivationdescriptorswishbeta_1(ptr , d_result *, CLIENT *);
extern  bool_t rpc_cudnngetactivationdescriptorswishbeta_1_svc(ptr , d_result *, struct svc_req *);
#define rpc_cudnnDestroyActivationDescriptor 5064
extern  enum clnt_stat rpc_cudnndestroyactivationdescriptor_1(ptr , int *, CLIENT *);
extern  bool_t rpc_cudnndestroyactivationdescriptor_1_svc(ptr , int *, struct svc_req *);
#define rpc_cudnnActivationForward 5065
extern  enum clnt_stat rpc_cudnnactivationforward_1(ptr , ptr , cudnn_scaling_t , ptr , ptr , cudnn_scaling_t , ptr , ptr , int *, CLIENT *);
extern  bool_t rpc_cudnnactivationforward_1_svc(ptr , ptr , cudnn_scaling_t , ptr , ptr , cudnn_scaling_t , ptr , ptr , int *, struct svc_req *);
#define rpc_cudnnCreateLRNDescriptor 5066
extern  enum clnt_stat rpc_cudnncreatelrndescriptor_1(ptr_result *, CLIENT *);
extern  bool_t rpc_cudnncreatelrndescriptor_1_svc(ptr_result *, struct svc_req *);
#define rpc_cudnnSetLRNDescriptor 5067
extern  enum clnt_stat rpc_cudnnsetlrndescriptor_1(ptr , u_int , double , double , double , int *, CLIENT *);
extern  bool_t rpc_cudnnsetlrndescriptor_1_svc(ptr , u_int , double , double , double , int *, struct svc_req *);
#define rpc_cudnnGetLRNDescriptor 5068
extern  enum clnt_stat rpc_cudnngetlrndescriptor_1(ptr , int1d3_result *, CLIENT *);
extern  bool_t rpc_cudnngetlrndescriptor_1_svc(ptr , int1d3_result *, struct svc_req *);
#define rpc_cudnnDestroyLRNDescriptor 5069
extern  enum clnt_stat rpc_cudnndestroylrndescriptor_1(ptr , int *, CLIENT *);
extern  bool_t rpc_cudnndestroylrndescriptor_1_svc(ptr , int *, struct svc_req *);
#define rpc_cudnnLRNCrossChannelForward 5070
extern  enum clnt_stat rpc_cudnnlrncrosschannelforward_1(ptr , ptr , int , cudnn_scaling_t , ptr , ptr , cudnn_scaling_t , ptr , ptr , int *, CLIENT *);
extern  bool_t rpc_cudnnlrncrosschannelforward_1_svc(ptr , ptr , int , cudnn_scaling_t , ptr , ptr , cudnn_scaling_t , ptr , ptr , int *, struct svc_req *);
#define rpc_cudnnCreateConvolutionDescriptor 5301
extern  enum clnt_stat rpc_cudnncreateconvolutiondescriptor_1(ptr_result *, CLIENT *);
extern  bool_t rpc_cudnncreateconvolutiondescriptor_1_svc(ptr_result *, struct svc_req *);
#define rpc_cudnnDestroyConvolutionDescriptor 5302
extern  enum clnt_stat rpc_cudnndestroyconvolutiondescriptor_1(ptr , int *, CLIENT *);
extern  bool_t rpc_cudnndestroyconvolutiondescriptor_1_svc(ptr , int *, struct svc_req *);
#define rpc_cudnnGetConvolutionNdForwardOutputDim 5303
extern  enum clnt_stat rpc_cudnngetconvolutionndforwardoutputdim_1(ptr , ptr , ptr , int , mem_result *, CLIENT *);
extern  bool_t rpc_cudnngetconvolutionndforwardoutputdim_1_svc(ptr , ptr , ptr , int , mem_result *, struct svc_req *);
#define rpc_cudnnSetConvolutionNdDescriptor 5304
extern  enum clnt_stat rpc_cudnnsetconvolutionnddescriptor_1(ptr , int , mem_data , mem_data , mem_data , int , int , int *, CLIENT *);
extern  bool_t rpc_cudnnsetconvolutionnddescriptor_1_svc(ptr , int , mem_data , mem_data , mem_data , int , int , int *, struct svc_req *);
#define rpc_cudnnGetConvolutionForwardAlgorithm_v7 5305
extern  enum clnt_stat rpc_cudnngetconvolutionforwardalgorithm_v7_1(ptr , ptr , ptr , ptr , ptr , int , mem_result *, CLIENT *);
extern  bool_t rpc_cudnngetconvolutionforwardalgorithm_v7_1_svc(ptr , ptr , ptr , ptr , ptr , int , mem_result *, struct svc_req *);
#define rpc_cudnnFindConvolutionForwardAlgorithm 5306
extern  enum clnt_stat rpc_cudnnfindconvolutionforwardalgorithm_1(ptr , ptr , ptr , ptr , ptr , int , mem_result *, CLIENT *);
extern  bool_t rpc_cudnnfindconvolutionforwardalgorithm_1_svc(ptr , ptr , ptr , ptr , ptr , int , mem_result *, struct svc_req *);
#define rpc_cudnnGetConvolutionForwardWorkspaceSize 5307
extern  enum clnt_stat rpc_cudnngetconvolutionforwardworkspacesize_1(ptr , ptr , ptr , ptr , ptr , int , sz_result *, CLIENT *);
extern  bool_t rpc_cudnngetconvolutionforwardworkspacesize_1_svc(ptr , ptr , ptr , ptr , ptr , int , sz_result *, struct svc_req *);
#define rpc_cudnnConvolutionForward 5308
extern  enum clnt_stat rpc_cudnnconvolutionforward_1(ptr , cudnn_scaling_t , ptr , ptr , ptr , ptr , ptr , int , ptr , size_t , cudnn_scaling_t , ptr , ptr , int *, CLIENT *);
extern  bool_t rpc_cudnnconvolutionforward_1_svc(ptr , cudnn_scaling_t , ptr , ptr , ptr , ptr , ptr , int , ptr , size_t , cudnn_scaling_t , ptr , ptr , int *, struct svc_req *);
#define rpc_cudnnBackendCreateDescriptor 5309
extern  enum clnt_stat rpc_cudnnbackendcreatedescriptor_1(int , ptr_result *, CLIENT *);
extern  bool_t rpc_cudnnbackendcreatedescriptor_1_svc(int , ptr_result *, struct svc_req *);
#define rpc_cudnnBackendDestroyDescriptor 5310
extern  enum clnt_stat rpc_cudnnbackenddestroydescriptor_1(ptr , int *, CLIENT *);
extern  bool_t rpc_cudnnbackenddestroydescriptor_1_svc(ptr , int *, struct svc_req *);
#define rpc_cudnnBackendInitialize 5311
extern  enum clnt_stat rpc_cudnnbackendinitialize_1(ptr , int *, CLIENT *);
extern  bool_t rpc_cudnnbackendinitialize_1_svc(ptr , int *, struct svc_req *);
#define rpc_cudnnBackendFinalize 5312
extern  enum clnt_stat rpc_cudnnbackendfinalize_1(ptr , int *, CLIENT *);
extern  bool_t rpc_cudnnbackendfinalize_1_svc(ptr , int *, struct svc_req *);
#define rpc_cudnnBackendSetAttribute 5313
extern  enum clnt_stat rpc_cudnnbackendsetattribute_1(ptr , int , int , quad_t , mem_data , int *, CLIENT *);
extern  bool_t rpc_cudnnbackendsetattribute_1_svc(ptr , int , int , quad_t , mem_data , int *, struct svc_req *);
#define rpc_cudnnBackendGetAttribute 5314
extern  enum clnt_stat rpc_cudnnbackendgetattribute_1(ptr , int , int , quad_t , mem_result *, CLIENT *);
extern  bool_t rpc_cudnnbackendgetattribute_1_svc(ptr , int , int , quad_t , mem_result *, struct svc_req *);
#define rpc_cudnnBackendExecute 5315
extern  enum clnt_stat rpc_cudnnbackendexecute_1(ptr , ptr , ptr , int *, CLIENT *);
extern  bool_t rpc_cudnnbackendexecute_1_svc(ptr , ptr , ptr , int *, struct svc_req *);
#define rpc_cudnnSetConvolutionGroupCount 5316
extern  enum clnt_stat rpc_cudnnsetconvolutiongroupcount_1(ptr , int , int *, CLIENT *);
extern  bool_t rpc_cudnnsetconvolutiongroupcount_1_svc(ptr , int , int *, struct svc_req *);
#define rpc_cudnnsetconvolutionmathtype 5317
extern  enum clnt_stat rpc_cudnnsetconvolutionmathtype_1(ptr , int , int *, CLIENT *);
extern  bool_t rpc_cudnnsetconvolutionmathtype_1_svc(ptr , int , int *, struct svc_req *);
#define rpc_cublasltcreate 5318
extern  enum clnt_stat rpc_cublasltcreate_1(ptr_result *, CLIENT *);
extern  bool_t rpc_cublasltcreate_1_svc(ptr_result *, struct svc_req *);
#define rpc_cublasltmatmuldesccreate 5319
extern  enum clnt_stat rpc_cublasltmatmuldesccreate_1(int , int , ptr_result *, CLIENT *);
extern  bool_t rpc_cublasltmatmuldesccreate_1_svc(int , int , ptr_result *, struct svc_req *);
#define rpc_cublasltmatmulalgogetheuristic 5320
extern  enum clnt_stat rpc_cublasltmatmulalgogetheuristic_1(ptr , ptr , ptr , ptr , ptr , ptr , ptr , int , matmul_hr_result *, CLIENT *);
extern  bool_t rpc_cublasltmatmulalgogetheuristic_1_svc(ptr , ptr , ptr , ptr , ptr , ptr , ptr , int , matmul_hr_result *, struct svc_req *);
#define rpc_cublasltmatmuldescsetattribute 5321
extern  enum clnt_stat rpc_cublasltmatmuldescsetattribute_1(ptr , int , mem_data , int *, CLIENT *);
extern  bool_t rpc_cublasltmatmuldescsetattribute_1_svc(ptr , int , mem_data , int *, struct svc_req *);
#define rpc_cublasltmatmuldescdestroy 5322
extern  enum clnt_stat rpc_cublasltmatmuldescdestroy_1(ptr , int *, CLIENT *);
extern  bool_t rpc_cublasltmatmuldescdestroy_1_svc(ptr , int *, struct svc_req *);
#define rpc_cublasltmatrixlayoutcreate 5323
extern  enum clnt_stat rpc_cublasltmatrixlayoutcreate_1(int , uint64_t , uint64_t , int64_t , ptr_result *, CLIENT *);
extern  bool_t rpc_cublasltmatrixlayoutcreate_1_svc(int , uint64_t , uint64_t , int64_t , ptr_result *, struct svc_req *);
#define rpc_cublasltmatmulpreferencecreate 5324
extern  enum clnt_stat rpc_cublasltmatmulpreferencecreate_1(ptr_result *, CLIENT *);
extern  bool_t rpc_cublasltmatmulpreferencecreate_1_svc(ptr_result *, struct svc_req *);
#define rpc_cublasltmatmulpreferencedestroy 5325
extern  enum clnt_stat rpc_cublasltmatmulpreferencedestroy_1(ptr , int *, CLIENT *);
extern  bool_t rpc_cublasltmatmulpreferencedestroy_1_svc(ptr , int *, struct svc_req *);
#define rpc_cublasltmatrixlayoutdestroy 5326
extern  enum clnt_stat rpc_cublasltmatrixlayoutdestroy_1(ptr , int *, CLIENT *);
extern  bool_t rpc_cublasltmatrixlayoutdestroy_1_svc(ptr , int *, struct svc_req *);
#define rpc_cublasltmatmul 5327
extern  enum clnt_stat rpc_cublasltmatmul_1(ptr , ptr , float , ptr , ptr , ptr , ptr , float , ptr , ptr , ptr , ptr , ptr , ptr , size_t , ptr , int *, CLIENT *);
extern  bool_t rpc_cublasltmatmul_1_svc(ptr , ptr , float , ptr , ptr , ptr , ptr , float , ptr , ptr , ptr , ptr , ptr , ptr , size_t , ptr , int *, struct svc_req *);
#define rpc_cublasgetmathmode 5328
extern  enum clnt_stat rpc_cublasgetmathmode_1(ptr , int_result *, CLIENT *);
extern  bool_t rpc_cublasgetmathmode_1_svc(ptr , int_result *, struct svc_req *);
#define rpc_cublasgemmstridedbatchedex 5329
extern  enum clnt_stat rpc_cublasgemmstridedbatchedex_1(ptr , int , int , int , int , int , float , ptr , int , int , ll , ptr , int , int , ll , float , ptr , int , int , ll , int , int , int , int *, CLIENT *);
extern  bool_t rpc_cublasgemmstridedbatchedex_1_svc(ptr , int , int , int , int , int , float , ptr , int , int , ll , ptr , int , int , ll , float , ptr , int , int , ll , int , int , int , int *, struct svc_req *);
#define rpc_cublasgemmex 5330
extern  enum clnt_stat rpc_cublasgemmex_1(ptr , int , int , int , int , int , float , ptr , int , int , ptr , int , int , float , ptr , int , int , int , int , int *, CLIENT *);
extern  bool_t rpc_cublasgemmex_1_svc(ptr , int , int , int , int , int , float , ptr , int , int , ptr , int , int , float , ptr , int , int , int , int , int *, struct svc_req *);
#define rpc_cublasgemmstridedbatched 5331
extern  enum clnt_stat rpc_cublasgemmstridedbatched_1(ptr , int , int , int , int , int , float , ptr , int , ll , ptr , int , ll , float , ptr , int , ll , int , int *, CLIENT *);
extern  bool_t rpc_cublasgemmstridedbatched_1_svc(ptr , int , int , int , int , int , float , ptr , int , ll , ptr , int , ll , float , ptr , int , ll , int , int *, struct svc_req *);
extern int rpc_cd_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define rpc_checkpoint 0
extern  enum clnt_stat rpc_checkpoint_1();
extern  bool_t rpc_checkpoint_1_svc();
#define rpc_deinit 1
extern  enum clnt_stat rpc_deinit_1();
extern  bool_t rpc_deinit_1_svc();
#define rpc_printmessage 2
extern  enum clnt_stat rpc_printmessage_1();
extern  bool_t rpc_printmessage_1_svc();
#define rpc_dlopen 3
extern  enum clnt_stat rpc_dlopen_1();
extern  bool_t rpc_dlopen_1_svc();
#define rpc_register_function 50
extern  enum clnt_stat rpc_register_function_1();
extern  bool_t rpc_register_function_1_svc();
#define rpc_elf_load 51
extern  enum clnt_stat rpc_elf_load_1();
extern  bool_t rpc_elf_load_1_svc();
#define rpc_elf_unload 52
extern  enum clnt_stat rpc_elf_unload_1();
extern  bool_t rpc_elf_unload_1_svc();
#define rpc_register_var 53
extern  enum clnt_stat rpc_register_var_1();
extern  bool_t rpc_register_var_1_svc();
#define rpc_init 54
extern  enum clnt_stat rpc_init_1();
extern  bool_t rpc_init_1_svc();
#define rpc_ckp_restore 55
extern  enum clnt_stat rpc_ckp_restore_1();
extern  bool_t rpc_ckp_restore_1_svc();
#define CUDA_CHOOSE_DEVICE 101
extern  enum clnt_stat cuda_choose_device_1();
extern  bool_t cuda_choose_device_1_svc();
#define CUDA_DEVICE_GET_ATTRIBUTE 102
extern  enum clnt_stat cuda_device_get_attribute_1();
extern  bool_t cuda_device_get_attribute_1_svc();
#define CUDA_DEVICE_GET_BY_PCI_BUS_ID 103
extern  enum clnt_stat cuda_device_get_by_pci_bus_id_1();
extern  bool_t cuda_device_get_by_pci_bus_id_1_svc();
#define CUDA_DEVICE_GET_CACHE_CONFIG 104
extern  enum clnt_stat cuda_device_get_cache_config_1();
extern  bool_t cuda_device_get_cache_config_1_svc();
#define CUDA_DEVICE_GET_LIMIT 105
extern  enum clnt_stat cuda_device_get_limit_1();
extern  bool_t cuda_device_get_limit_1_svc();
#define CUDA_DEVICE_GET_P2P_ATTRIBUTE 107
extern  enum clnt_stat cuda_device_get_p2p_attribute_1();
extern  bool_t cuda_device_get_p2p_attribute_1_svc();
#define CUDA_DEVICE_GET_PCI_BUS_ID 108
extern  enum clnt_stat cuda_device_get_pci_bus_id_1();
extern  bool_t cuda_device_get_pci_bus_id_1_svc();
#define CUDA_DEVICE_GET_SHARED_MEM_CONFIG 109
extern  enum clnt_stat cuda_device_get_shared_mem_config_1();
extern  bool_t cuda_device_get_shared_mem_config_1_svc();
#define CUDA_DEVICE_GET_STREAM_PRIORITY_RANGE 110
extern  enum clnt_stat cuda_device_get_stream_priority_range_1();
extern  bool_t cuda_device_get_stream_priority_range_1_svc();
#define CUDA_DEVICE_GET_TEXTURE_LMW 111
extern  enum clnt_stat cuda_device_get_texture_lmw_1();
extern  bool_t cuda_device_get_texture_lmw_1_svc();
#define CUDA_DEVICE_RESET 112
extern  enum clnt_stat cuda_device_reset_1();
extern  bool_t cuda_device_reset_1_svc();
#define CUDA_DEVICE_SET_CACHE_CONFIG 113
extern  enum clnt_stat cuda_device_set_cache_config_1();
extern  bool_t cuda_device_set_cache_config_1_svc();
#define CUDA_DEVICE_SET_LIMIT 114
extern  enum clnt_stat cuda_device_set_limit_1();
extern  bool_t cuda_device_set_limit_1_svc();
#define CUDA_DEVICE_SET_SHARED_MEM_CONFIG 115
extern  enum clnt_stat cuda_device_set_shared_mem_config_1();
extern  bool_t cuda_device_set_shared_mem_config_1_svc();
#define CUDA_DEVICE_SYNCHRONIZE 116
extern  enum clnt_stat cuda_device_synchronize_1();
extern  bool_t cuda_device_synchronize_1_svc();
#define CUDA_GET_DEVICE 117
extern  enum clnt_stat cuda_get_device_1();
extern  bool_t cuda_get_device_1_svc();
#define CUDA_GET_DEVICE_COUNT 118
extern  enum clnt_stat cuda_get_device_count_1();
extern  bool_t cuda_get_device_count_1_svc();
#define CUDA_GET_DEVICE_FLAGS 119
extern  enum clnt_stat cuda_get_device_flags_1();
extern  bool_t cuda_get_device_flags_1_svc();
#define CUDA_GET_DEVICE_PROPERTIES 120
extern  enum clnt_stat cuda_get_device_properties_1();
extern  bool_t cuda_get_device_properties_1_svc();
#define CUDA_SET_DEVICE 126
extern  enum clnt_stat cuda_set_device_1();
extern  bool_t cuda_set_device_1_svc();
#define CUDA_SET_DEVICE_FLAGS 127
extern  enum clnt_stat cuda_set_device_flags_1();
extern  bool_t cuda_set_device_flags_1_svc();
#define CUDA_SET_VALID_DEVICES 128
extern  enum clnt_stat cuda_set_valid_devices_1();
extern  bool_t cuda_set_valid_devices_1_svc();
#define CUDA_GET_ERROR_NAME 140
extern  enum clnt_stat cuda_get_error_name_1();
extern  bool_t cuda_get_error_name_1_svc();
#define CUDA_GET_ERROR_STRING 141
extern  enum clnt_stat cuda_get_error_string_1();
extern  bool_t cuda_get_error_string_1_svc();
#define CUDA_GET_LAST_ERROR 142
extern  enum clnt_stat cuda_get_last_error_1();
extern  bool_t cuda_get_last_error_1_svc();
#define CUDA_PEEK_AT_LAST_ERROR 143
extern  enum clnt_stat cuda_peek_at_last_error_1();
extern  bool_t cuda_peek_at_last_error_1_svc();
#define CUDA_CTX_RESET_PERSISTING_L2CACHE 250
extern  enum clnt_stat cuda_ctx_reset_persisting_l2cache_1();
extern  bool_t cuda_ctx_reset_persisting_l2cache_1_svc();
#define CUDA_STREAM_COPY_ATTRIBUTES 254
extern  enum clnt_stat cuda_stream_copy_attributes_1();
extern  bool_t cuda_stream_copy_attributes_1_svc();
#define CUDA_STREAM_CREATE 255
extern  enum clnt_stat cuda_stream_create_1();
extern  bool_t cuda_stream_create_1_svc();
#define CUDA_STREAM_CREATE_WITH_FLAGS 256
extern  enum clnt_stat cuda_stream_create_with_flags_1();
extern  bool_t cuda_stream_create_with_flags_1_svc();
#define CUDA_STREAM_CREATE_WITH_PRIORITY 257
extern  enum clnt_stat cuda_stream_create_with_priority_1();
extern  bool_t cuda_stream_create_with_priority_1_svc();
#define CUDA_STREAM_DESTROY 258
extern  enum clnt_stat cuda_stream_destroy_1();
extern  bool_t cuda_stream_destroy_1_svc();
#define CUDA_STREAM_GET_FLAGS 262
extern  enum clnt_stat cuda_stream_get_flags_1();
extern  bool_t cuda_stream_get_flags_1_svc();
#define CUDA_STREAM_GET_PRIORITY 263
extern  enum clnt_stat cuda_stream_get_priority_1();
extern  bool_t cuda_stream_get_priority_1_svc();
#define CUDA_STREAM_IS_CAPTURING 264
extern  enum clnt_stat cuda_stream_is_capturing_1();
extern  bool_t cuda_stream_is_capturing_1_svc();
#define CUDA_STREAM_QUERY 265
extern  enum clnt_stat cuda_stream_query_1();
extern  bool_t cuda_stream_query_1_svc();
#define CUDA_STREAM_SYNCHRONIZE 267
extern  enum clnt_stat cuda_stream_synchronize_1();
extern  bool_t cuda_stream_synchronize_1_svc();
#define CUDA_STREAM_WAIT_EVENT 268
extern  enum clnt_stat cuda_stream_wait_event_1();
extern  bool_t cuda_stream_wait_event_1_svc();
#define CUDA_THREAD_EXCHANGE_STREAM_CAPTURE_MODE 269
extern  enum clnt_stat cuda_thread_exchange_stream_capture_mode_1();
extern  bool_t cuda_thread_exchange_stream_capture_mode_1_svc();
#define CUDA_EVENT_CREATE 280
extern  enum clnt_stat cuda_event_create_1();
extern  bool_t cuda_event_create_1_svc();
#define CUDA_EVENT_CREATE_WITH_FLAGS 281
extern  enum clnt_stat cuda_event_create_with_flags_1();
extern  bool_t cuda_event_create_with_flags_1_svc();
#define CUDA_EVENT_DESTROY 282
extern  enum clnt_stat cuda_event_destroy_1();
extern  bool_t cuda_event_destroy_1_svc();
#define CUDA_EVENT_ELAPSED_TIME 283
extern  enum clnt_stat cuda_event_elapsed_time_1();
extern  bool_t cuda_event_elapsed_time_1_svc();
#define CUDA_EVENT_QUERY 284
extern  enum clnt_stat cuda_event_query_1();
extern  bool_t cuda_event_query_1_svc();
#define CUDA_EVENT_RECORD 285
extern  enum clnt_stat cuda_event_record_1();
extern  bool_t cuda_event_record_1_svc();
#define CUDA_EVENT_RECORD_WITH_FLAGS 286
extern  enum clnt_stat cuda_event_record_with_flags_1();
extern  bool_t cuda_event_record_with_flags_1_svc();
#define CUDA_EVENT_SYNCHRONIZE 287
extern  enum clnt_stat cuda_event_synchronize_1();
extern  bool_t cuda_event_synchronize_1_svc();
#define CUDA_FUNC_GET_ATTRIBUTES 310
extern  enum clnt_stat cuda_func_get_attributes_1();
extern  bool_t cuda_func_get_attributes_1_svc();
#define CUDA_FUNC_SET_ATTRIBUTES 311
extern  enum clnt_stat cuda_func_set_attributes_1();
extern  bool_t cuda_func_set_attributes_1_svc();
#define CUDA_FUNC_SET_CACHE_CONFIG 312
extern  enum clnt_stat cuda_func_set_cache_config_1();
extern  bool_t cuda_func_set_cache_config_1_svc();
#define CUDA_FUNC_SET_SHARED_MEM_CONFIG 313
extern  enum clnt_stat cuda_func_set_shared_mem_config_1();
extern  bool_t cuda_func_set_shared_mem_config_1_svc();
#define CUDA_LAUNCH_COOPERATIVE_KERNEL 314
extern  enum clnt_stat cuda_launch_cooperative_kernel_1();
extern  bool_t cuda_launch_cooperative_kernel_1_svc();
#define CUDA_LAUNCH_KERNEL 317
extern  enum clnt_stat cuda_launch_kernel_1();
extern  bool_t cuda_launch_kernel_1_svc();
#define CUDA_OCCUPANCY_AVAILABLE_DSMPB 330
extern  enum clnt_stat cuda_occupancy_available_dsmpb_1();
extern  bool_t cuda_occupancy_available_dsmpb_1_svc();
#define CUDA_OCCUPANCY_MAX_ACTIVE_BPM 331
extern  enum clnt_stat cuda_occupancy_max_active_bpm_1();
extern  bool_t cuda_occupancy_max_active_bpm_1_svc();
#define CUDA_OCCUPANCY_MAX_ACTIVE_BPM_WITH_FLAGS 332
extern  enum clnt_stat cuda_occupancy_max_active_bpm_with_flags_1();
extern  bool_t cuda_occupancy_max_active_bpm_with_flags_1_svc();
#define CUDA_ARRAY_GET_INFO 400
extern  enum clnt_stat cuda_array_get_info_1();
extern  bool_t cuda_array_get_info_1_svc();
#define CUDA_ARRAY_GET_SPARSE_PROPERTIES 401
extern  enum clnt_stat cuda_array_get_sparse_properties_1();
extern  bool_t cuda_array_get_sparse_properties_1_svc();
#define CUDA_FREE 402
extern  enum clnt_stat cuda_free_1();
extern  bool_t cuda_free_1_svc();
#define CUDA_FREE_ARRAY 403
extern  enum clnt_stat cuda_free_array_1();
extern  bool_t cuda_free_array_1_svc();
#define CUDA_FREE_HOST 404
extern  enum clnt_stat cuda_free_host_1();
extern  bool_t cuda_free_host_1_svc();
#define CUDA_GET_SYMBOL_ADDRESS 407
extern  enum clnt_stat cuda_get_symbol_address_1();
extern  bool_t cuda_get_symbol_address_1_svc();
#define CUDA_GET_SYMBOL_SIZE 408
extern  enum clnt_stat cuda_get_symbol_size_1();
extern  bool_t cuda_get_symbol_size_1_svc();
#define CUDA_HOST_ALLOC 409
extern  enum clnt_stat cuda_host_alloc_1();
extern  bool_t cuda_host_alloc_1_svc();
#define CUDA_HOST_ALLOC_REGSHM 477
extern  enum clnt_stat cuda_host_alloc_regshm_1();
extern  bool_t cuda_host_alloc_regshm_1_svc();
#define CUDA_HOST_GET_DEVICE_POINTER 410
extern  enum clnt_stat cuda_host_get_device_pointer_1();
extern  bool_t cuda_host_get_device_pointer_1_svc();
#define CUDA_HOST_GET_FLAGS 411
extern  enum clnt_stat cuda_host_get_flags_1();
extern  bool_t cuda_host_get_flags_1_svc();
#define CUDA_MALLOC 414
extern  enum clnt_stat cuda_malloc_1();
extern  bool_t cuda_malloc_1_svc();
#define CUDA_MALLOC_3D 415
extern  enum clnt_stat cuda_malloc_3d_1();
extern  bool_t cuda_malloc_3d_1_svc();
#define CUDA_MALLOC_3D_ARRAY 416
extern  enum clnt_stat cuda_malloc_3d_array_1();
extern  bool_t cuda_malloc_3d_array_1_svc();
#define CUDA_MALLOC_ARRAY 417
extern  enum clnt_stat cuda_malloc_array_1();
extern  bool_t cuda_malloc_array_1_svc();
#define CUDA_MALLOC_PITCH 421
extern  enum clnt_stat cuda_malloc_pitch_1();
extern  bool_t cuda_malloc_pitch_1_svc();
#define CUDA_MEM_ADVISE 422
extern  enum clnt_stat cuda_mem_advise_1();
extern  bool_t cuda_mem_advise_1_svc();
#define CUDA_MEM_GET_INFO 423
extern  enum clnt_stat cuda_mem_get_info_1();
extern  bool_t cuda_mem_get_info_1_svc();
#define CUDA_MEM_PREFETCH_ASYNC 424
extern  enum clnt_stat cuda_mem_prefetch_async_1();
extern  bool_t cuda_mem_prefetch_async_1_svc();
#define CUDA_MEMCPY_HTOD 440
extern  enum clnt_stat cuda_memcpy_htod_1();
extern  bool_t cuda_memcpy_htod_1_svc();
#define CUDA_MEMCPY_DTOH 441
extern  enum clnt_stat cuda_memcpy_dtoh_1();
extern  bool_t cuda_memcpy_dtoh_1_svc();
#define CUDA_MEMCPY_SHM 442
extern  enum clnt_stat cuda_memcpy_shm_1();
extern  bool_t cuda_memcpy_shm_1_svc();
#define CUDA_MEMCPY_DTOD 443
extern  enum clnt_stat cuda_memcpy_dtod_1();
extern  bool_t cuda_memcpy_dtod_1_svc();
#define CUDA_MEMCPY_TO_SYMBOL 445
extern  enum clnt_stat cuda_memcpy_to_symbol_1();
extern  bool_t cuda_memcpy_to_symbol_1_svc();
#define CUDA_MEMCPY_TO_SYMBOL_SHM 446
extern  enum clnt_stat cuda_memcpy_to_symbol_shm_1();
extern  bool_t cuda_memcpy_to_symbol_shm_1_svc();
#define CUDA_MEMCPY_IB 447
extern  enum clnt_stat cuda_memcpy_ib_1();
extern  bool_t cuda_memcpy_ib_1_svc();
#define CUDA_MEMCPY_MT_HTOD 449
extern  enum clnt_stat cuda_memcpy_mt_htod_1();
extern  bool_t cuda_memcpy_mt_htod_1_svc();
#define CUDA_MEMCPY_MT_DTOH 450
extern  enum clnt_stat cuda_memcpy_mt_dtoh_1();
extern  bool_t cuda_memcpy_mt_dtoh_1_svc();
#define CUDA_MEMCPY_MT_SYNC 451
extern  enum clnt_stat cuda_memcpy_mt_sync_1();
extern  bool_t cuda_memcpy_mt_sync_1_svc();
#define CUDA_MEMSET 470
extern  enum clnt_stat cuda_memset_1();
extern  bool_t cuda_memset_1_svc();
#define CUDA_MEMSET_2D 471
extern  enum clnt_stat cuda_memset_2d_1();
extern  bool_t cuda_memset_2d_1_svc();
#define CUDA_MEMSET_2D_ASYNC 472
extern  enum clnt_stat cuda_memset_2d_async_1();
extern  bool_t cuda_memset_2d_async_1_svc();
#define CUDA_MEMSET_3D 473
extern  enum clnt_stat cuda_memset_3d_1();
extern  bool_t cuda_memset_3d_1_svc();
#define CUDA_MEMSET_3D_ASYNC 474
extern  enum clnt_stat cuda_memset_3d_async_1();
extern  bool_t cuda_memset_3d_async_1_svc();
#define CUDA_MEMSET_ASYNC 475
extern  enum clnt_stat cuda_memset_async_1();
extern  bool_t cuda_memset_async_1_svc();
#define CUDA_DEVICE_CAN_ACCESS_PEER 500
extern  enum clnt_stat cuda_device_can_access_peer_1();
extern  bool_t cuda_device_can_access_peer_1_svc();
#define CUDA_DEVICE_DISABLE_PEER_ACCESS 501
extern  enum clnt_stat cuda_device_disable_peer_access_1();
extern  bool_t cuda_device_disable_peer_access_1_svc();
#define CUDA_DEVICE_ENABLE_PEER_ACCESS 502
extern  enum clnt_stat cuda_device_enable_peer_access_1();
extern  bool_t cuda_device_enable_peer_access_1_svc();
#define CUDA_DRIVER_GET_VERSION 510
extern  enum clnt_stat cuda_driver_get_version_1();
extern  bool_t cuda_driver_get_version_1_svc();
#define CUDA_RUNTIME_GET_VERSION 511
extern  enum clnt_stat cuda_runtime_get_version_1();
extern  bool_t cuda_runtime_get_version_1_svc();
#define CUDA_PROFILER_START 701
extern  enum clnt_stat cuda_profiler_start_1();
extern  bool_t cuda_profiler_start_1_svc();
#define CUDA_PROFILER_STOP 702
extern  enum clnt_stat cuda_profiler_stop_1();
extern  bool_t cuda_profiler_stop_1_svc();
#define rpc_cuDeviceGetCount 1002
extern  enum clnt_stat rpc_cudevicegetcount_1();
extern  bool_t rpc_cudevicegetcount_1_svc();
#define rpc_cuInit 1003
extern  enum clnt_stat rpc_cuinit_1();
extern  bool_t rpc_cuinit_1_svc();
#define rpc_cuDriverGetVersion 1004
extern  enum clnt_stat rpc_cudrivergetversion_1();
extern  bool_t rpc_cudrivergetversion_1_svc();
#define rpc_cuDeviceGet 1005
extern  enum clnt_stat rpc_cudeviceget_1();
extern  bool_t rpc_cudeviceget_1_svc();
#define rpc_cuDeviceGetName 1006
extern  enum clnt_stat rpc_cudevicegetname_1();
extern  bool_t rpc_cudevicegetname_1_svc();
#define rpc_cuDeviceTotalMem 1007
extern  enum clnt_stat rpc_cudevicetotalmem_1();
extern  bool_t rpc_cudevicetotalmem_1_svc();
#define rpc_cuDeviceGetAttribute 1008
extern  enum clnt_stat rpc_cudevicegetattribute_1();
extern  bool_t rpc_cudevicegetattribute_1_svc();
#define rpc_cuDeviceGetUuid 1009
extern  enum clnt_stat rpc_cudevicegetuuid_1();
extern  bool_t rpc_cudevicegetuuid_1_svc();
#define rpc_cuCtxGetCurrent 1010
extern  enum clnt_stat rpc_cuctxgetcurrent_1();
extern  bool_t rpc_cuctxgetcurrent_1_svc();
#define rpc_cuCtxSetCurrent 1011
extern  enum clnt_stat rpc_cuctxsetcurrent_1();
extern  bool_t rpc_cuctxsetcurrent_1_svc();
#define rpc_cuDevicePrimaryCtxRetain 1012
extern  enum clnt_stat rpc_cudeviceprimaryctxretain_1();
extern  bool_t rpc_cudeviceprimaryctxretain_1_svc();
#define rpc_cuModuleGetFunction 1013
extern  enum clnt_stat rpc_cumodulegetfunction_1();
extern  bool_t rpc_cumodulegetfunction_1_svc();
#define rpc_cuMemAlloc 1015
extern  enum clnt_stat rpc_cumemalloc_1();
extern  bool_t rpc_cumemalloc_1_svc();
#define rpc_cuCtxGetDevice 1016
extern  enum clnt_stat rpc_cuctxgetdevice_1();
extern  bool_t rpc_cuctxgetdevice_1_svc();
#define rpc_cuMemcpyHtoD 1017
extern  enum clnt_stat rpc_cumemcpyhtod_1();
extern  bool_t rpc_cumemcpyhtod_1_svc();
#define rpc_cuLaunchKernel 1018
extern  enum clnt_stat rpc_culaunchkernel_1();
extern  bool_t rpc_culaunchkernel_1_svc();
#define rpc_cuModuleLoad 1019
extern  enum clnt_stat rpc_cumoduleload_1();
extern  bool_t rpc_cumoduleload_1_svc();
#define rpc_cuGetErrorString 1020
extern  enum clnt_stat rpc_cugeterrorstring_1();
extern  bool_t rpc_cugeterrorstring_1_svc();
#define rpc_cuModuleUnload 1021
extern  enum clnt_stat rpc_cumoduleunload_1();
extern  bool_t rpc_cumoduleunload_1_svc();
#define rpc_cuDevicePrimaryCtxGetState 1022
extern  enum clnt_stat rpc_cudeviceprimaryctxgetstate_1();
extern  bool_t rpc_cudeviceprimaryctxgetstate_1_svc();
#define rpc_cuDeviceGetProperties 1023
extern  enum clnt_stat rpc_cudevicegetproperties_1();
extern  bool_t rpc_cudevicegetproperties_1_svc();
#define rpc_cuDeviceComputeCapability 1024
extern  enum clnt_stat rpc_cudevicecomputecapability_1();
extern  bool_t rpc_cudevicecomputecapability_1_svc();
#define rpc_cuDeviceGetP2PAttribute 1025
extern  enum clnt_stat rpc_cudevicegetp2pattribute_1();
extern  bool_t rpc_cudevicegetp2pattribute_1_svc();
#define rpc_cuModuleLoadData 1026
extern  enum clnt_stat rpc_cumoduleloaddata_1();
extern  bool_t rpc_cumoduleloaddata_1_svc();
#define rpc_cusolverDnCreate 2001
extern  enum clnt_stat rpc_cusolverdncreate_1();
extern  bool_t rpc_cusolverdncreate_1_svc();
#define rpc_cusolverDnSetStream 2002
extern  enum clnt_stat rpc_cusolverdnsetstream_1();
extern  bool_t rpc_cusolverdnsetstream_1_svc();
#define rpc_cusolverDnDgetrf_bufferSize 2003
extern  enum clnt_stat rpc_cusolverdndgetrf_buffersize_1();
extern  bool_t rpc_cusolverdndgetrf_buffersize_1_svc();
#define rpc_cusolverDnDgetrf 2004
extern  enum clnt_stat rpc_cusolverdndgetrf_1();
extern  bool_t rpc_cusolverdndgetrf_1_svc();
#define rpc_cusolverDnDgetrs 2005
extern  enum clnt_stat rpc_cusolverdndgetrs_1();
extern  bool_t rpc_cusolverdndgetrs_1_svc();
#define rpc_cusolverDnDestroy 2006
extern  enum clnt_stat rpc_cusolverdndestroy_1();
extern  bool_t rpc_cusolverdndestroy_1_svc();
#define rpc_cublasCreate 3001
extern  enum clnt_stat rpc_cublascreate_1();
extern  bool_t rpc_cublascreate_1_svc();
#define rpc_cublasDgemm 3002
extern  enum clnt_stat rpc_cublasdgemm_1();
extern  bool_t rpc_cublasdgemm_1_svc();
#define rpc_cublasDestroy 3003
extern  enum clnt_stat rpc_cublasdestroy_1();
extern  bool_t rpc_cublasdestroy_1_svc();
#define rpc_cublasSgemm 3004
extern  enum clnt_stat rpc_cublassgemm_1();
extern  bool_t rpc_cublassgemm_1_svc();
#define rpc_cublasSgemv 3005
extern  enum clnt_stat rpc_cublassgemv_1();
extern  bool_t rpc_cublassgemv_1_svc();
#define rpc_cublasDgemv 3006
extern  enum clnt_stat rpc_cublasdgemv_1();
extern  bool_t rpc_cublasdgemv_1_svc();
#define rpc_cublasSgemmEx 3007
extern  enum clnt_stat rpc_cublassgemmex_1();
extern  bool_t rpc_cublassgemmex_1_svc();
#define rpc_cublasSetStream 3008
extern  enum clnt_stat rpc_cublassetstream_1();
extern  bool_t rpc_cublassetstream_1_svc();
#define rpc_cublasSetWorkspace 3009
extern  enum clnt_stat rpc_cublassetworkspace_1();
extern  bool_t rpc_cublassetworkspace_1_svc();
#define rpc_cublasSetMathMode 3010
extern  enum clnt_stat rpc_cublassetmathmode_1();
extern  bool_t rpc_cublassetmathmode_1_svc();
#define rpc_nvmlDeviceGetCount_v2 4000
extern  enum clnt_stat rpc_nvmldevicegetcount_v2_1();
extern  bool_t rpc_nvmldevicegetcount_v2_1_svc();
#define rpc_nvmlInitWithFlags 4001
extern  enum clnt_stat rpc_nvmlinitwithflags_1();
extern  bool_t rpc_nvmlinitwithflags_1_svc();
#define rpc_nvmlInit_v2 4002
extern  enum clnt_stat rpc_nvmlinit_v2_1();
extern  bool_t rpc_nvmlinit_v2_1_svc();
#define rpc_nvmlShutdown 4003
extern  enum clnt_stat rpc_nvmlshutdown_1();
extern  bool_t rpc_nvmlshutdown_1_svc();
#define rpc_cudnnGetVersion 5000
extern  enum clnt_stat rpc_cudnngetversion_1();
extern  bool_t rpc_cudnngetversion_1_svc();
#define rpc_cudnnGetMaxDeviceVersion 5001
extern  enum clnt_stat rpc_cudnngetmaxdeviceversion_1();
extern  bool_t rpc_cudnngetmaxdeviceversion_1_svc();
#define rpc_cudnnGetCudartVersion 5002
extern  enum clnt_stat rpc_cudnngetcudartversion_1();
extern  bool_t rpc_cudnngetcudartversion_1_svc();
#define rpc_cudnnGetErrorString 5003
extern  enum clnt_stat rpc_cudnngeterrorstring_1();
extern  bool_t rpc_cudnngeterrorstring_1_svc();
#define rpc_cudnnQueryRuntimeError 5004
extern  enum clnt_stat rpc_cudnnqueryruntimeerror_1();
extern  bool_t rpc_cudnnqueryruntimeerror_1_svc();
#define rpc_cudnnGetProperty 5005
extern  enum clnt_stat rpc_cudnngetproperty_1();
extern  bool_t rpc_cudnngetproperty_1_svc();
#define rpc_cudnnCreate 5006
extern  enum clnt_stat rpc_cudnncreate_1();
extern  bool_t rpc_cudnncreate_1_svc();
#define rpc_cudnnDestroy 5007
extern  enum clnt_stat rpc_cudnndestroy_1();
extern  bool_t rpc_cudnndestroy_1_svc();
#define rpc_cudnnSetStream 5008
extern  enum clnt_stat rpc_cudnnsetstream_1();
extern  bool_t rpc_cudnnsetstream_1_svc();
#define rpc_cudnnGetStream 5009
extern  enum clnt_stat rpc_cudnngetstream_1();
extern  bool_t rpc_cudnngetstream_1_svc();
#define rpc_cudnnCreateTensorDescriptor 5010
extern  enum clnt_stat rpc_cudnncreatetensordescriptor_1();
extern  bool_t rpc_cudnncreatetensordescriptor_1_svc();
#define rpc_cudnnSetTensor4dDescriptor 5011
extern  enum clnt_stat rpc_cudnnsettensor4ddescriptor_1();
extern  bool_t rpc_cudnnsettensor4ddescriptor_1_svc();
#define rpc_cudnnSetTensor4dDescriptorEx 5012
extern  enum clnt_stat rpc_cudnnsettensor4ddescriptorex_1();
extern  bool_t rpc_cudnnsettensor4ddescriptorex_1_svc();
#define rpc_cudnnGetTensor4dDescriptor 5013
extern  enum clnt_stat rpc_cudnngettensor4ddescriptor_1();
extern  bool_t rpc_cudnngettensor4ddescriptor_1_svc();
#define rpc_cudnnSetTensorNdDescriptor 5014
extern  enum clnt_stat rpc_cudnnsettensornddescriptor_1();
extern  bool_t rpc_cudnnsettensornddescriptor_1_svc();
#define rpc_cudnnSetTensorNdDescriptorEx 5015
extern  enum clnt_stat rpc_cudnnsettensornddescriptorex_1();
extern  bool_t rpc_cudnnsettensornddescriptorex_1_svc();
#define rpc_cudnnGetTensorNdDescriptor 5016
extern  enum clnt_stat rpc_cudnngettensornddescriptor_1();
extern  bool_t rpc_cudnngettensornddescriptor_1_svc();
#define rpc_cudnnGetTensorSizeInBytes 5017
extern  enum clnt_stat rpc_cudnngettensorsizeinbytes_1();
extern  bool_t rpc_cudnngettensorsizeinbytes_1_svc();
#define rpc_cudnnDestroyTensorDescriptor 5018
extern  enum clnt_stat rpc_cudnndestroytensordescriptor_1();
extern  bool_t rpc_cudnndestroytensordescriptor_1_svc();
#define rpc_cudnnTransformTensor 5024
extern  enum clnt_stat rpc_cudnntransformtensor_1();
extern  bool_t rpc_cudnntransformtensor_1_svc();
#define rpc_cudnnAddTensor 5026
extern  enum clnt_stat rpc_cudnnaddtensor_1();
extern  bool_t rpc_cudnnaddtensor_1_svc();
#define rpc_cudnnCreateFilterDescriptor 5041
extern  enum clnt_stat rpc_cudnncreatefilterdescriptor_1();
extern  bool_t rpc_cudnncreatefilterdescriptor_1_svc();
#define rpc_cudnnSetFilter4dDescriptor 5042
extern  enum clnt_stat rpc_cudnnsetfilter4ddescriptor_1();
extern  bool_t rpc_cudnnsetfilter4ddescriptor_1_svc();
#define rpc_cudnnGetFilter4dDescriptor 5043
extern  enum clnt_stat rpc_cudnngetfilter4ddescriptor_1();
extern  bool_t rpc_cudnngetfilter4ddescriptor_1_svc();
#define rpc_cudnnSetFilterNdDescriptor 5044
extern  enum clnt_stat rpc_cudnnsetfilternddescriptor_1();
extern  bool_t rpc_cudnnsetfilternddescriptor_1_svc();
#define rpc_cudnnGetFilterNdDescriptor 5045
extern  enum clnt_stat rpc_cudnngetfilternddescriptor_1();
extern  bool_t rpc_cudnngetfilternddescriptor_1_svc();
#define rpc_cudnnGetFilterSizeInBytes 5046
extern  enum clnt_stat rpc_cudnngetfiltersizeinbytes_1();
extern  bool_t rpc_cudnngetfiltersizeinbytes_1_svc();
#define rpc_cudnnTransformFilter 5047
extern  enum clnt_stat rpc_cudnntransformfilter_1();
extern  bool_t rpc_cudnntransformfilter_1_svc();
#define rpc_cudnnDestroyFilterDescriptor 5048
extern  enum clnt_stat rpc_cudnndestroyfilterdescriptor_1();
extern  bool_t rpc_cudnndestroyfilterdescriptor_1_svc();
#define rpc_cudnnSoftmaxForward 5049
extern  enum clnt_stat rpc_cudnnsoftmaxforward_1();
extern  bool_t rpc_cudnnsoftmaxforward_1_svc();
#define rpc_cudnnCreatePoolingDescriptor 5050
extern  enum clnt_stat rpc_cudnncreatepoolingdescriptor_1();
extern  bool_t rpc_cudnncreatepoolingdescriptor_1_svc();
#define rpc_cudnnSetPooling2dDescriptor 5051
extern  enum clnt_stat rpc_cudnnsetpooling2ddescriptor_1();
extern  bool_t rpc_cudnnsetpooling2ddescriptor_1_svc();
#define rpc_cudnnGetPooling2dDescriptor 5052
extern  enum clnt_stat rpc_cudnngetpooling2ddescriptor_1();
extern  bool_t rpc_cudnngetpooling2ddescriptor_1_svc();
#define rpc_cudnnSetPoolingNdDescriptor 5053
extern  enum clnt_stat rpc_cudnnsetpoolingnddescriptor_1();
extern  bool_t rpc_cudnnsetpoolingnddescriptor_1_svc();
#define rpc_cudnnGetPoolingNdDescriptor 5054
extern  enum clnt_stat rpc_cudnngetpoolingnddescriptor_1();
extern  bool_t rpc_cudnngetpoolingnddescriptor_1_svc();
#define rpc_cudnnGetPoolingNdForwardOutputDim 5055
extern  enum clnt_stat rpc_cudnngetpoolingndforwardoutputdim_1();
extern  bool_t rpc_cudnngetpoolingndforwardoutputdim_1_svc();
#define rpc_cudnnGetPooling2dForwardOutputDim 5056
extern  enum clnt_stat rpc_cudnngetpooling2dforwardoutputdim_1();
extern  bool_t rpc_cudnngetpooling2dforwardoutputdim_1_svc();
#define rpc_cudnnDestroyPoolingDescriptor 5057
extern  enum clnt_stat rpc_cudnndestroypoolingdescriptor_1();
extern  bool_t rpc_cudnndestroypoolingdescriptor_1_svc();
#define rpc_cudnnPoolingForward 5058
extern  enum clnt_stat rpc_cudnnpoolingforward_1();
extern  bool_t rpc_cudnnpoolingforward_1_svc();
#define rpc_cudnnCreateActivationDescriptor 5059
extern  enum clnt_stat rpc_cudnncreateactivationdescriptor_1();
extern  bool_t rpc_cudnncreateactivationdescriptor_1_svc();
#define rpc_cudnnSetActivationDescriptor 5060
extern  enum clnt_stat rpc_cudnnsetactivationdescriptor_1();
extern  bool_t rpc_cudnnsetactivationdescriptor_1_svc();
#define rpc_cudnnGetActivationDescriptor 5061
extern  enum clnt_stat rpc_cudnngetactivationdescriptor_1();
extern  bool_t rpc_cudnngetactivationdescriptor_1_svc();
#define rpc_cudnnSetActivationDescriptorSwishBeta 5062
extern  enum clnt_stat rpc_cudnnsetactivationdescriptorswishbeta_1();
extern  bool_t rpc_cudnnsetactivationdescriptorswishbeta_1_svc();
#define rpc_cudnnGetActivationDescriptorSwishBeta 5063
extern  enum clnt_stat rpc_cudnngetactivationdescriptorswishbeta_1();
extern  bool_t rpc_cudnngetactivationdescriptorswishbeta_1_svc();
#define rpc_cudnnDestroyActivationDescriptor 5064
extern  enum clnt_stat rpc_cudnndestroyactivationdescriptor_1();
extern  bool_t rpc_cudnndestroyactivationdescriptor_1_svc();
#define rpc_cudnnActivationForward 5065
extern  enum clnt_stat rpc_cudnnactivationforward_1();
extern  bool_t rpc_cudnnactivationforward_1_svc();
#define rpc_cudnnCreateLRNDescriptor 5066
extern  enum clnt_stat rpc_cudnncreatelrndescriptor_1();
extern  bool_t rpc_cudnncreatelrndescriptor_1_svc();
#define rpc_cudnnSetLRNDescriptor 5067
extern  enum clnt_stat rpc_cudnnsetlrndescriptor_1();
extern  bool_t rpc_cudnnsetlrndescriptor_1_svc();
#define rpc_cudnnGetLRNDescriptor 5068
extern  enum clnt_stat rpc_cudnngetlrndescriptor_1();
extern  bool_t rpc_cudnngetlrndescriptor_1_svc();
#define rpc_cudnnDestroyLRNDescriptor 5069
extern  enum clnt_stat rpc_cudnndestroylrndescriptor_1();
extern  bool_t rpc_cudnndestroylrndescriptor_1_svc();
#define rpc_cudnnLRNCrossChannelForward 5070
extern  enum clnt_stat rpc_cudnnlrncrosschannelforward_1();
extern  bool_t rpc_cudnnlrncrosschannelforward_1_svc();
#define rpc_cudnnCreateConvolutionDescriptor 5301
extern  enum clnt_stat rpc_cudnncreateconvolutiondescriptor_1();
extern  bool_t rpc_cudnncreateconvolutiondescriptor_1_svc();
#define rpc_cudnnDestroyConvolutionDescriptor 5302
extern  enum clnt_stat rpc_cudnndestroyconvolutiondescriptor_1();
extern  bool_t rpc_cudnndestroyconvolutiondescriptor_1_svc();
#define rpc_cudnnGetConvolutionNdForwardOutputDim 5303
extern  enum clnt_stat rpc_cudnngetconvolutionndforwardoutputdim_1();
extern  bool_t rpc_cudnngetconvolutionndforwardoutputdim_1_svc();
#define rpc_cudnnSetConvolutionNdDescriptor 5304
extern  enum clnt_stat rpc_cudnnsetconvolutionnddescriptor_1();
extern  bool_t rpc_cudnnsetconvolutionnddescriptor_1_svc();
#define rpc_cudnnGetConvolutionForwardAlgorithm_v7 5305
extern  enum clnt_stat rpc_cudnngetconvolutionforwardalgorithm_v7_1();
extern  bool_t rpc_cudnngetconvolutionforwardalgorithm_v7_1_svc();
#define rpc_cudnnFindConvolutionForwardAlgorithm 5306
extern  enum clnt_stat rpc_cudnnfindconvolutionforwardalgorithm_1();
extern  bool_t rpc_cudnnfindconvolutionforwardalgorithm_1_svc();
#define rpc_cudnnGetConvolutionForwardWorkspaceSize 5307
extern  enum clnt_stat rpc_cudnngetconvolutionforwardworkspacesize_1();
extern  bool_t rpc_cudnngetconvolutionforwardworkspacesize_1_svc();
#define rpc_cudnnConvolutionForward 5308
extern  enum clnt_stat rpc_cudnnconvolutionforward_1();
extern  bool_t rpc_cudnnconvolutionforward_1_svc();
#define rpc_cudnnBackendCreateDescriptor 5309
extern  enum clnt_stat rpc_cudnnbackendcreatedescriptor_1();
extern  bool_t rpc_cudnnbackendcreatedescriptor_1_svc();
#define rpc_cudnnBackendDestroyDescriptor 5310
extern  enum clnt_stat rpc_cudnnbackenddestroydescriptor_1();
extern  bool_t rpc_cudnnbackenddestroydescriptor_1_svc();
#define rpc_cudnnBackendInitialize 5311
extern  enum clnt_stat rpc_cudnnbackendinitialize_1();
extern  bool_t rpc_cudnnbackendinitialize_1_svc();
#define rpc_cudnnBackendFinalize 5312
extern  enum clnt_stat rpc_cudnnbackendfinalize_1();
extern  bool_t rpc_cudnnbackendfinalize_1_svc();
#define rpc_cudnnBackendSetAttribute 5313
extern  enum clnt_stat rpc_cudnnbackendsetattribute_1();
extern  bool_t rpc_cudnnbackendsetattribute_1_svc();
#define rpc_cudnnBackendGetAttribute 5314
extern  enum clnt_stat rpc_cudnnbackendgetattribute_1();
extern  bool_t rpc_cudnnbackendgetattribute_1_svc();
#define rpc_cudnnBackendExecute 5315
extern  enum clnt_stat rpc_cudnnbackendexecute_1();
extern  bool_t rpc_cudnnbackendexecute_1_svc();
#define rpc_cudnnSetConvolutionGroupCount 5316
extern  enum clnt_stat rpc_cudnnsetconvolutiongroupcount_1();
extern  bool_t rpc_cudnnsetconvolutiongroupcount_1_svc();
#define rpc_cudnnsetconvolutionmathtype 5317
extern  enum clnt_stat rpc_cudnnsetconvolutionmathtype_1();
extern  bool_t rpc_cudnnsetconvolutionmathtype_1_svc();
#define rpc_cublasltcreate 5318
extern  enum clnt_stat rpc_cublasltcreate_1();
extern  bool_t rpc_cublasltcreate_1_svc();
#define rpc_cublasltmatmuldesccreate 5319
extern  enum clnt_stat rpc_cublasltmatmuldesccreate_1();
extern  bool_t rpc_cublasltmatmuldesccreate_1_svc();
#define rpc_cublasltmatmulalgogetheuristic 5320
extern  enum clnt_stat rpc_cublasltmatmulalgogetheuristic_1();
extern  bool_t rpc_cublasltmatmulalgogetheuristic_1_svc();
#define rpc_cublasltmatmuldescsetattribute 5321
extern  enum clnt_stat rpc_cublasltmatmuldescsetattribute_1();
extern  bool_t rpc_cublasltmatmuldescsetattribute_1_svc();
#define rpc_cublasltmatmuldescdestroy 5322
extern  enum clnt_stat rpc_cublasltmatmuldescdestroy_1();
extern  bool_t rpc_cublasltmatmuldescdestroy_1_svc();
#define rpc_cublasltmatrixlayoutcreate 5323
extern  enum clnt_stat rpc_cublasltmatrixlayoutcreate_1();
extern  bool_t rpc_cublasltmatrixlayoutcreate_1_svc();
#define rpc_cublasltmatmulpreferencecreate 5324
extern  enum clnt_stat rpc_cublasltmatmulpreferencecreate_1();
extern  bool_t rpc_cublasltmatmulpreferencecreate_1_svc();
#define rpc_cublasltmatmulpreferencedestroy 5325
extern  enum clnt_stat rpc_cublasltmatmulpreferencedestroy_1();
extern  bool_t rpc_cublasltmatmulpreferencedestroy_1_svc();
#define rpc_cublasltmatrixlayoutdestroy 5326
extern  enum clnt_stat rpc_cublasltmatrixlayoutdestroy_1();
extern  bool_t rpc_cublasltmatrixlayoutdestroy_1_svc();
#define rpc_cublasltmatmul 5327
extern  enum clnt_stat rpc_cublasltmatmul_1();
extern  bool_t rpc_cublasltmatmul_1_svc();
#define rpc_cublasgetmathmode 5328
extern  enum clnt_stat rpc_cublasgetmathmode_1();
extern  bool_t rpc_cublasgetmathmode_1_svc();
#define rpc_cublasgemmstridedbatchedex 5329
extern  enum clnt_stat rpc_cublasgemmstridedbatchedex_1();
extern  bool_t rpc_cublasgemmstridedbatchedex_1_svc();
#define rpc_cublasgemmex 5330
extern  enum clnt_stat rpc_cublasgemmex_1();
extern  bool_t rpc_cublasgemmex_1_svc();
#define rpc_cublasgemmstridedbatched 5331
extern  enum clnt_stat rpc_cublasgemmstridedbatched_1();
extern  bool_t rpc_cublasgemmstridedbatched_1_svc();
extern int rpc_cd_prog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_mem_data (XDR *, mem_data*);
extern  bool_t xdr_size_t (XDR *, size_t*);
extern  bool_t xdr_ptr (XDR *, ptr*);
extern  bool_t xdr_ll (XDR *, ll*);
extern  bool_t xdr_rpc_cuda_device_prop (XDR *, rpc_cuda_device_prop);
extern  bool_t xdr_rpc_matmul_heuristic_result (XDR *, rpc_matmul_heuristic_result);
extern  bool_t xdr_dint (XDR *, dint*);
extern  bool_t xdr_dsz (XDR *, dsz*);
extern  bool_t xdr_ptrsz (XDR *, ptrsz*);
extern  bool_t xdr_matmul_hr (XDR *, matmul_hr*);
extern  bool_t xdr_cuda_channel_format_desc (XDR *, cuda_channel_format_desc*);
extern  bool_t xdr_pitche_ptr (XDR *, pitche_ptr*);
extern  bool_t xdr_rpc_dim3 (XDR *, rpc_dim3*);
extern  bool_t xdr_int2d1 (XDR *, int2d1*);
extern  bool_t xdr_int1d3 (XDR *, int1d3*);
extern  bool_t xdr_cudnn_scaling_t (XDR *, cudnn_scaling_t*);
extern  bool_t xdr_int_result (XDR *, int_result*);
extern  bool_t xdr_dint_result (XDR *, dint_result*);
extern  bool_t xdr_float_result (XDR *, float_result*);
extern  bool_t xdr_d_result (XDR *, d_result*);
extern  bool_t xdr_u64_result (XDR *, u64_result*);
extern  bool_t xdr_dsz_result (XDR *, dsz_result*);
extern  bool_t xdr_sz_result (XDR *, sz_result*);
extern  bool_t xdr_ptr_result (XDR *, ptr_result*);
extern  bool_t xdr_pptr_result (XDR *, pptr_result*);
extern  bool_t xdr_str_result (XDR *, str_result*);
extern  bool_t xdr_ptrsz_result (XDR *, ptrsz_result*);
extern  bool_t xdr_matmul_hr_result (XDR *, matmul_hr_result*);
extern  bool_t xdr_mem_result (XDR *, mem_result*);
extern  bool_t xdr_cuda_device_prop_result (XDR *, cuda_device_prop_result*);
extern  bool_t xdr_int3_result (XDR *, int3_result*);
extern  bool_t xdr_int4_result (XDR *, int4_result*);
extern  bool_t xdr_int5_result (XDR *, int5_result*);
extern  bool_t xdr_int6_result (XDR *, int6_result*);
extern  bool_t xdr_int8_result (XDR *, int8_result*);
extern  bool_t xdr_int9_result (XDR *, int9_result*);
extern  bool_t xdr_int2d1_result (XDR *, int2d1_result*);
extern  bool_t xdr_int1d3_result (XDR *, int1d3_result*);
extern  bool_t xdr_rpc_register_function_1_argument (XDR *, rpc_register_function_1_argument*);
extern  bool_t xdr_rpc_elf_load_1_argument (XDR *, rpc_elf_load_1_argument*);
extern  bool_t xdr_rpc_register_var_1_argument (XDR *, rpc_register_var_1_argument*);
extern  bool_t xdr_cuda_device_get_attribute_1_argument (XDR *, cuda_device_get_attribute_1_argument*);
extern  bool_t xdr_cuda_device_get_p2p_attribute_1_argument (XDR *, cuda_device_get_p2p_attribute_1_argument*);
extern  bool_t xdr_cuda_device_get_pci_bus_id_1_argument (XDR *, cuda_device_get_pci_bus_id_1_argument*);
extern  bool_t xdr_cuda_device_get_texture_lmw_1_argument (XDR *, cuda_device_get_texture_lmw_1_argument*);
extern  bool_t xdr_cuda_device_set_limit_1_argument (XDR *, cuda_device_set_limit_1_argument*);
extern  bool_t xdr_cuda_set_valid_devices_1_argument (XDR *, cuda_set_valid_devices_1_argument*);
extern  bool_t xdr_cuda_stream_copy_attributes_1_argument (XDR *, cuda_stream_copy_attributes_1_argument*);
extern  bool_t xdr_cuda_stream_create_with_priority_1_argument (XDR *, cuda_stream_create_with_priority_1_argument*);
extern  bool_t xdr_cuda_stream_wait_event_1_argument (XDR *, cuda_stream_wait_event_1_argument*);
extern  bool_t xdr_cuda_event_elapsed_time_1_argument (XDR *, cuda_event_elapsed_time_1_argument*);
extern  bool_t xdr_cuda_event_record_1_argument (XDR *, cuda_event_record_1_argument*);
extern  bool_t xdr_cuda_event_record_with_flags_1_argument (XDR *, cuda_event_record_with_flags_1_argument*);
extern  bool_t xdr_cuda_func_set_attributes_1_argument (XDR *, cuda_func_set_attributes_1_argument*);
extern  bool_t xdr_cuda_func_set_cache_config_1_argument (XDR *, cuda_func_set_cache_config_1_argument*);
extern  bool_t xdr_cuda_func_set_shared_mem_config_1_argument (XDR *, cuda_func_set_shared_mem_config_1_argument*);
extern  bool_t xdr_cuda_launch_cooperative_kernel_1_argument (XDR *, cuda_launch_cooperative_kernel_1_argument*);
extern  bool_t xdr_cuda_launch_kernel_1_argument (XDR *, cuda_launch_kernel_1_argument*);
extern  bool_t xdr_cuda_occupancy_available_dsmpb_1_argument (XDR *, cuda_occupancy_available_dsmpb_1_argument*);
extern  bool_t xdr_cuda_occupancy_max_active_bpm_1_argument (XDR *, cuda_occupancy_max_active_bpm_1_argument*);
extern  bool_t xdr_cuda_occupancy_max_active_bpm_with_flags_1_argument (XDR *, cuda_occupancy_max_active_bpm_with_flags_1_argument*);
extern  bool_t xdr_cuda_host_alloc_1_argument (XDR *, cuda_host_alloc_1_argument*);
extern  bool_t xdr_cuda_host_alloc_regshm_1_argument (XDR *, cuda_host_alloc_regshm_1_argument*);
extern  bool_t xdr_cuda_host_get_device_pointer_1_argument (XDR *, cuda_host_get_device_pointer_1_argument*);
extern  bool_t xdr_cuda_malloc_3d_1_argument (XDR *, cuda_malloc_3d_1_argument*);
extern  bool_t xdr_cuda_malloc_3d_array_1_argument (XDR *, cuda_malloc_3d_array_1_argument*);
extern  bool_t xdr_cuda_malloc_array_1_argument (XDR *, cuda_malloc_array_1_argument*);
extern  bool_t xdr_cuda_malloc_pitch_1_argument (XDR *, cuda_malloc_pitch_1_argument*);
extern  bool_t xdr_cuda_mem_advise_1_argument (XDR *, cuda_mem_advise_1_argument*);
extern  bool_t xdr_cuda_mem_prefetch_async_1_argument (XDR *, cuda_mem_prefetch_async_1_argument*);
extern  bool_t xdr_cuda_memcpy_htod_1_argument (XDR *, cuda_memcpy_htod_1_argument*);
extern  bool_t xdr_cuda_memcpy_dtoh_1_argument (XDR *, cuda_memcpy_dtoh_1_argument*);
extern  bool_t xdr_cuda_memcpy_shm_1_argument (XDR *, cuda_memcpy_shm_1_argument*);
extern  bool_t xdr_cuda_memcpy_dtod_1_argument (XDR *, cuda_memcpy_dtod_1_argument*);
extern  bool_t xdr_cuda_memcpy_to_symbol_1_argument (XDR *, cuda_memcpy_to_symbol_1_argument*);
extern  bool_t xdr_cuda_memcpy_to_symbol_shm_1_argument (XDR *, cuda_memcpy_to_symbol_shm_1_argument*);
extern  bool_t xdr_cuda_memcpy_ib_1_argument (XDR *, cuda_memcpy_ib_1_argument*);
extern  bool_t xdr_cuda_memcpy_mt_htod_1_argument (XDR *, cuda_memcpy_mt_htod_1_argument*);
extern  bool_t xdr_cuda_memcpy_mt_dtoh_1_argument (XDR *, cuda_memcpy_mt_dtoh_1_argument*);
extern  bool_t xdr_cuda_memset_1_argument (XDR *, cuda_memset_1_argument*);
extern  bool_t xdr_cuda_memset_2d_1_argument (XDR *, cuda_memset_2d_1_argument*);
extern  bool_t xdr_cuda_memset_2d_async_1_argument (XDR *, cuda_memset_2d_async_1_argument*);
extern  bool_t xdr_cuda_memset_3d_1_argument (XDR *, cuda_memset_3d_1_argument*);
extern  bool_t xdr_cuda_memset_3d_async_1_argument (XDR *, cuda_memset_3d_async_1_argument*);
extern  bool_t xdr_cuda_memset_async_1_argument (XDR *, cuda_memset_async_1_argument*);
extern  bool_t xdr_cuda_device_can_access_peer_1_argument (XDR *, cuda_device_can_access_peer_1_argument*);
extern  bool_t xdr_cuda_device_enable_peer_access_1_argument (XDR *, cuda_device_enable_peer_access_1_argument*);
extern  bool_t xdr_rpc_cudevicegetattribute_1_argument (XDR *, rpc_cudevicegetattribute_1_argument*);
extern  bool_t xdr_rpc_cumodulegetfunction_1_argument (XDR *, rpc_cumodulegetfunction_1_argument*);
extern  bool_t xdr_rpc_cumemcpyhtod_1_argument (XDR *, rpc_cumemcpyhtod_1_argument*);
extern  bool_t xdr_rpc_culaunchkernel_1_argument (XDR *, rpc_culaunchkernel_1_argument*);
extern  bool_t xdr_rpc_cudevicegetp2pattribute_1_argument (XDR *, rpc_cudevicegetp2pattribute_1_argument*);
extern  bool_t xdr_rpc_cusolverdnsetstream_1_argument (XDR *, rpc_cusolverdnsetstream_1_argument*);
extern  bool_t xdr_rpc_cusolverdndgetrf_buffersize_1_argument (XDR *, rpc_cusolverdndgetrf_buffersize_1_argument*);
extern  bool_t xdr_rpc_cusolverdndgetrf_1_argument (XDR *, rpc_cusolverdndgetrf_1_argument*);
extern  bool_t xdr_rpc_cusolverdndgetrs_1_argument (XDR *, rpc_cusolverdndgetrs_1_argument*);
extern  bool_t xdr_rpc_cublasdgemm_1_argument (XDR *, rpc_cublasdgemm_1_argument*);
extern  bool_t xdr_rpc_cublassgemm_1_argument (XDR *, rpc_cublassgemm_1_argument*);
extern  bool_t xdr_rpc_cublassgemv_1_argument (XDR *, rpc_cublassgemv_1_argument*);
extern  bool_t xdr_rpc_cublasdgemv_1_argument (XDR *, rpc_cublasdgemv_1_argument*);
extern  bool_t xdr_rpc_cublassgemmex_1_argument (XDR *, rpc_cublassgemmex_1_argument*);
extern  bool_t xdr_rpc_cublassetstream_1_argument (XDR *, rpc_cublassetstream_1_argument*);
extern  bool_t xdr_rpc_cublassetworkspace_1_argument (XDR *, rpc_cublassetworkspace_1_argument*);
extern  bool_t xdr_rpc_cublassetmathmode_1_argument (XDR *, rpc_cublassetmathmode_1_argument*);
extern  bool_t xdr_rpc_cudnnqueryruntimeerror_1_argument (XDR *, rpc_cudnnqueryruntimeerror_1_argument*);
extern  bool_t xdr_rpc_cudnnsetstream_1_argument (XDR *, rpc_cudnnsetstream_1_argument*);
extern  bool_t xdr_rpc_cudnnsettensor4ddescriptor_1_argument (XDR *, rpc_cudnnsettensor4ddescriptor_1_argument*);
extern  bool_t xdr_rpc_cudnnsettensor4ddescriptorex_1_argument (XDR *, rpc_cudnnsettensor4ddescriptorex_1_argument*);
extern  bool_t xdr_rpc_cudnnsettensornddescriptor_1_argument (XDR *, rpc_cudnnsettensornddescriptor_1_argument*);
extern  bool_t xdr_rpc_cudnnsettensornddescriptorex_1_argument (XDR *, rpc_cudnnsettensornddescriptorex_1_argument*);
extern  bool_t xdr_rpc_cudnngettensornddescriptor_1_argument (XDR *, rpc_cudnngettensornddescriptor_1_argument*);
extern  bool_t xdr_rpc_cudnntransformtensor_1_argument (XDR *, rpc_cudnntransformtensor_1_argument*);
extern  bool_t xdr_rpc_cudnnaddtensor_1_argument (XDR *, rpc_cudnnaddtensor_1_argument*);
extern  bool_t xdr_rpc_cudnnsetfilter4ddescriptor_1_argument (XDR *, rpc_cudnnsetfilter4ddescriptor_1_argument*);
extern  bool_t xdr_rpc_cudnnsetfilternddescriptor_1_argument (XDR *, rpc_cudnnsetfilternddescriptor_1_argument*);
extern  bool_t xdr_rpc_cudnngetfilternddescriptor_1_argument (XDR *, rpc_cudnngetfilternddescriptor_1_argument*);
extern  bool_t xdr_rpc_cudnntransformfilter_1_argument (XDR *, rpc_cudnntransformfilter_1_argument*);
extern  bool_t xdr_rpc_cudnnsoftmaxforward_1_argument (XDR *, rpc_cudnnsoftmaxforward_1_argument*);
extern  bool_t xdr_rpc_cudnnsetpooling2ddescriptor_1_argument (XDR *, rpc_cudnnsetpooling2ddescriptor_1_argument*);
extern  bool_t xdr_rpc_cudnnsetpoolingnddescriptor_1_argument (XDR *, rpc_cudnnsetpoolingnddescriptor_1_argument*);
extern  bool_t xdr_rpc_cudnngetpoolingnddescriptor_1_argument (XDR *, rpc_cudnngetpoolingnddescriptor_1_argument*);
extern  bool_t xdr_rpc_cudnngetpoolingndforwardoutputdim_1_argument (XDR *, rpc_cudnngetpoolingndforwardoutputdim_1_argument*);
extern  bool_t xdr_rpc_cudnngetpooling2dforwardoutputdim_1_argument (XDR *, rpc_cudnngetpooling2dforwardoutputdim_1_argument*);
extern  bool_t xdr_rpc_cudnnpoolingforward_1_argument (XDR *, rpc_cudnnpoolingforward_1_argument*);
extern  bool_t xdr_rpc_cudnnsetactivationdescriptor_1_argument (XDR *, rpc_cudnnsetactivationdescriptor_1_argument*);
extern  bool_t xdr_rpc_cudnnsetactivationdescriptorswishbeta_1_argument (XDR *, rpc_cudnnsetactivationdescriptorswishbeta_1_argument*);
extern  bool_t xdr_rpc_cudnnactivationforward_1_argument (XDR *, rpc_cudnnactivationforward_1_argument*);
extern  bool_t xdr_rpc_cudnnsetlrndescriptor_1_argument (XDR *, rpc_cudnnsetlrndescriptor_1_argument*);
extern  bool_t xdr_rpc_cudnnlrncrosschannelforward_1_argument (XDR *, rpc_cudnnlrncrosschannelforward_1_argument*);
extern  bool_t xdr_rpc_cudnngetconvolutionndforwardoutputdim_1_argument (XDR *, rpc_cudnngetconvolutionndforwardoutputdim_1_argument*);
extern  bool_t xdr_rpc_cudnnsetconvolutionnddescriptor_1_argument (XDR *, rpc_cudnnsetconvolutionnddescriptor_1_argument*);
extern  bool_t xdr_rpc_cudnngetconvolutionforwardalgorithm_v7_1_argument (XDR *, rpc_cudnngetconvolutionforwardalgorithm_v7_1_argument*);
extern  bool_t xdr_rpc_cudnnfindconvolutionforwardalgorithm_1_argument (XDR *, rpc_cudnnfindconvolutionforwardalgorithm_1_argument*);
extern  bool_t xdr_rpc_cudnngetconvolutionforwardworkspacesize_1_argument (XDR *, rpc_cudnngetconvolutionforwardworkspacesize_1_argument*);
extern  bool_t xdr_rpc_cudnnconvolutionforward_1_argument (XDR *, rpc_cudnnconvolutionforward_1_argument*);
extern  bool_t xdr_rpc_cudnnbackendsetattribute_1_argument (XDR *, rpc_cudnnbackendsetattribute_1_argument*);
extern  bool_t xdr_rpc_cudnnbackendgetattribute_1_argument (XDR *, rpc_cudnnbackendgetattribute_1_argument*);
extern  bool_t xdr_rpc_cudnnbackendexecute_1_argument (XDR *, rpc_cudnnbackendexecute_1_argument*);
extern  bool_t xdr_rpc_cudnnsetconvolutiongroupcount_1_argument (XDR *, rpc_cudnnsetconvolutiongroupcount_1_argument*);
extern  bool_t xdr_rpc_cudnnsetconvolutionmathtype_1_argument (XDR *, rpc_cudnnsetconvolutionmathtype_1_argument*);
extern  bool_t xdr_rpc_cublasltmatmuldesccreate_1_argument (XDR *, rpc_cublasltmatmuldesccreate_1_argument*);
extern  bool_t xdr_rpc_cublasltmatmulalgogetheuristic_1_argument (XDR *, rpc_cublasltmatmulalgogetheuristic_1_argument*);
extern  bool_t xdr_rpc_cublasltmatmuldescsetattribute_1_argument (XDR *, rpc_cublasltmatmuldescsetattribute_1_argument*);
extern  bool_t xdr_rpc_cublasltmatrixlayoutcreate_1_argument (XDR *, rpc_cublasltmatrixlayoutcreate_1_argument*);
extern  bool_t xdr_rpc_cublasltmatmul_1_argument (XDR *, rpc_cublasltmatmul_1_argument*);
extern  bool_t xdr_rpc_cublasgemmstridedbatchedex_1_argument (XDR *, rpc_cublasgemmstridedbatchedex_1_argument*);
extern  bool_t xdr_rpc_cublasgemmex_1_argument (XDR *, rpc_cublasgemmex_1_argument*);
extern  bool_t xdr_rpc_cublasgemmstridedbatched_1_argument (XDR *, rpc_cublasgemmstridedbatched_1_argument*);

#else /* K&R C */
extern bool_t xdr_mem_data ();
extern bool_t xdr_size_t ();
extern bool_t xdr_ptr ();
extern bool_t xdr_ll ();
extern bool_t xdr_rpc_cuda_device_prop ();
extern bool_t xdr_rpc_matmul_heuristic_result ();
extern bool_t xdr_dint ();
extern bool_t xdr_dsz ();
extern bool_t xdr_ptrsz ();
extern bool_t xdr_matmul_hr ();
extern bool_t xdr_cuda_channel_format_desc ();
extern bool_t xdr_pitche_ptr ();
extern bool_t xdr_rpc_dim3 ();
extern bool_t xdr_int2d1 ();
extern bool_t xdr_int1d3 ();
extern bool_t xdr_cudnn_scaling_t ();
extern bool_t xdr_int_result ();
extern bool_t xdr_dint_result ();
extern bool_t xdr_float_result ();
extern bool_t xdr_d_result ();
extern bool_t xdr_u64_result ();
extern bool_t xdr_dsz_result ();
extern bool_t xdr_sz_result ();
extern bool_t xdr_ptr_result ();
extern bool_t xdr_pptr_result ();
extern bool_t xdr_str_result ();
extern bool_t xdr_ptrsz_result ();
extern bool_t xdr_matmul_hr_result ();
extern bool_t xdr_mem_result ();
extern bool_t xdr_cuda_device_prop_result ();
extern bool_t xdr_int3_result ();
extern bool_t xdr_int4_result ();
extern bool_t xdr_int5_result ();
extern bool_t xdr_int6_result ();
extern bool_t xdr_int8_result ();
extern bool_t xdr_int9_result ();
extern bool_t xdr_int2d1_result ();
extern bool_t xdr_int1d3_result ();
extern bool_t xdr_rpc_register_function_1_argument ();
extern bool_t xdr_rpc_elf_load_1_argument ();
extern bool_t xdr_rpc_register_var_1_argument ();
extern bool_t xdr_cuda_device_get_attribute_1_argument ();
extern bool_t xdr_cuda_device_get_p2p_attribute_1_argument ();
extern bool_t xdr_cuda_device_get_pci_bus_id_1_argument ();
extern bool_t xdr_cuda_device_get_texture_lmw_1_argument ();
extern bool_t xdr_cuda_device_set_limit_1_argument ();
extern bool_t xdr_cuda_set_valid_devices_1_argument ();
extern bool_t xdr_cuda_stream_copy_attributes_1_argument ();
extern bool_t xdr_cuda_stream_create_with_priority_1_argument ();
extern bool_t xdr_cuda_stream_wait_event_1_argument ();
extern bool_t xdr_cuda_event_elapsed_time_1_argument ();
extern bool_t xdr_cuda_event_record_1_argument ();
extern bool_t xdr_cuda_event_record_with_flags_1_argument ();
extern bool_t xdr_cuda_func_set_attributes_1_argument ();
extern bool_t xdr_cuda_func_set_cache_config_1_argument ();
extern bool_t xdr_cuda_func_set_shared_mem_config_1_argument ();
extern bool_t xdr_cuda_launch_cooperative_kernel_1_argument ();
extern bool_t xdr_cuda_launch_kernel_1_argument ();
extern bool_t xdr_cuda_occupancy_available_dsmpb_1_argument ();
extern bool_t xdr_cuda_occupancy_max_active_bpm_1_argument ();
extern bool_t xdr_cuda_occupancy_max_active_bpm_with_flags_1_argument ();
extern bool_t xdr_cuda_host_alloc_1_argument ();
extern bool_t xdr_cuda_host_alloc_regshm_1_argument ();
extern bool_t xdr_cuda_host_get_device_pointer_1_argument ();
extern bool_t xdr_cuda_malloc_3d_1_argument ();
extern bool_t xdr_cuda_malloc_3d_array_1_argument ();
extern bool_t xdr_cuda_malloc_array_1_argument ();
extern bool_t xdr_cuda_malloc_pitch_1_argument ();
extern bool_t xdr_cuda_mem_advise_1_argument ();
extern bool_t xdr_cuda_mem_prefetch_async_1_argument ();
extern bool_t xdr_cuda_memcpy_htod_1_argument ();
extern bool_t xdr_cuda_memcpy_dtoh_1_argument ();
extern bool_t xdr_cuda_memcpy_shm_1_argument ();
extern bool_t xdr_cuda_memcpy_dtod_1_argument ();
extern bool_t xdr_cuda_memcpy_to_symbol_1_argument ();
extern bool_t xdr_cuda_memcpy_to_symbol_shm_1_argument ();
extern bool_t xdr_cuda_memcpy_ib_1_argument ();
extern bool_t xdr_cuda_memcpy_mt_htod_1_argument ();
extern bool_t xdr_cuda_memcpy_mt_dtoh_1_argument ();
extern bool_t xdr_cuda_memset_1_argument ();
extern bool_t xdr_cuda_memset_2d_1_argument ();
extern bool_t xdr_cuda_memset_2d_async_1_argument ();
extern bool_t xdr_cuda_memset_3d_1_argument ();
extern bool_t xdr_cuda_memset_3d_async_1_argument ();
extern bool_t xdr_cuda_memset_async_1_argument ();
extern bool_t xdr_cuda_device_can_access_peer_1_argument ();
extern bool_t xdr_cuda_device_enable_peer_access_1_argument ();
extern bool_t xdr_rpc_cudevicegetattribute_1_argument ();
extern bool_t xdr_rpc_cumodulegetfunction_1_argument ();
extern bool_t xdr_rpc_cumemcpyhtod_1_argument ();
extern bool_t xdr_rpc_culaunchkernel_1_argument ();
extern bool_t xdr_rpc_cudevicegetp2pattribute_1_argument ();
extern bool_t xdr_rpc_cusolverdnsetstream_1_argument ();
extern bool_t xdr_rpc_cusolverdndgetrf_buffersize_1_argument ();
extern bool_t xdr_rpc_cusolverdndgetrf_1_argument ();
extern bool_t xdr_rpc_cusolverdndgetrs_1_argument ();
extern bool_t xdr_rpc_cublasdgemm_1_argument ();
extern bool_t xdr_rpc_cublassgemm_1_argument ();
extern bool_t xdr_rpc_cublassgemv_1_argument ();
extern bool_t xdr_rpc_cublasdgemv_1_argument ();
extern bool_t xdr_rpc_cublassgemmex_1_argument ();
extern bool_t xdr_rpc_cublassetstream_1_argument ();
extern bool_t xdr_rpc_cublassetworkspace_1_argument ();
extern bool_t xdr_rpc_cublassetmathmode_1_argument ();
extern bool_t xdr_rpc_cudnnqueryruntimeerror_1_argument ();
extern bool_t xdr_rpc_cudnnsetstream_1_argument ();
extern bool_t xdr_rpc_cudnnsettensor4ddescriptor_1_argument ();
extern bool_t xdr_rpc_cudnnsettensor4ddescriptorex_1_argument ();
extern bool_t xdr_rpc_cudnnsettensornddescriptor_1_argument ();
extern bool_t xdr_rpc_cudnnsettensornddescriptorex_1_argument ();
extern bool_t xdr_rpc_cudnngettensornddescriptor_1_argument ();
extern bool_t xdr_rpc_cudnntransformtensor_1_argument ();
extern bool_t xdr_rpc_cudnnaddtensor_1_argument ();
extern bool_t xdr_rpc_cudnnsetfilter4ddescriptor_1_argument ();
extern bool_t xdr_rpc_cudnnsetfilternddescriptor_1_argument ();
extern bool_t xdr_rpc_cudnngetfilternddescriptor_1_argument ();
extern bool_t xdr_rpc_cudnntransformfilter_1_argument ();
extern bool_t xdr_rpc_cudnnsoftmaxforward_1_argument ();
extern bool_t xdr_rpc_cudnnsetpooling2ddescriptor_1_argument ();
extern bool_t xdr_rpc_cudnnsetpoolingnddescriptor_1_argument ();
extern bool_t xdr_rpc_cudnngetpoolingnddescriptor_1_argument ();
extern bool_t xdr_rpc_cudnngetpoolingndforwardoutputdim_1_argument ();
extern bool_t xdr_rpc_cudnngetpooling2dforwardoutputdim_1_argument ();
extern bool_t xdr_rpc_cudnnpoolingforward_1_argument ();
extern bool_t xdr_rpc_cudnnsetactivationdescriptor_1_argument ();
extern bool_t xdr_rpc_cudnnsetactivationdescriptorswishbeta_1_argument ();
extern bool_t xdr_rpc_cudnnactivationforward_1_argument ();
extern bool_t xdr_rpc_cudnnsetlrndescriptor_1_argument ();
extern bool_t xdr_rpc_cudnnlrncrosschannelforward_1_argument ();
extern bool_t xdr_rpc_cudnngetconvolutionndforwardoutputdim_1_argument ();
extern bool_t xdr_rpc_cudnnsetconvolutionnddescriptor_1_argument ();
extern bool_t xdr_rpc_cudnngetconvolutionforwardalgorithm_v7_1_argument ();
extern bool_t xdr_rpc_cudnnfindconvolutionforwardalgorithm_1_argument ();
extern bool_t xdr_rpc_cudnngetconvolutionforwardworkspacesize_1_argument ();
extern bool_t xdr_rpc_cudnnconvolutionforward_1_argument ();
extern bool_t xdr_rpc_cudnnbackendsetattribute_1_argument ();
extern bool_t xdr_rpc_cudnnbackendgetattribute_1_argument ();
extern bool_t xdr_rpc_cudnnbackendexecute_1_argument ();
extern bool_t xdr_rpc_cudnnsetconvolutiongroupcount_1_argument ();
extern bool_t xdr_rpc_cudnnsetconvolutionmathtype_1_argument ();
extern bool_t xdr_rpc_cublasltmatmuldesccreate_1_argument ();
extern bool_t xdr_rpc_cublasltmatmulalgogetheuristic_1_argument ();
extern bool_t xdr_rpc_cublasltmatmuldescsetattribute_1_argument ();
extern bool_t xdr_rpc_cublasltmatrixlayoutcreate_1_argument ();
extern bool_t xdr_rpc_cublasltmatmul_1_argument ();
extern bool_t xdr_rpc_cublasgemmstridedbatchedex_1_argument ();
extern bool_t xdr_rpc_cublasgemmex_1_argument ();
extern bool_t xdr_rpc_cublasgemmstridedbatched_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CPU_RPC_PROT_H_RPCGEN */
